
define_model('church_3k_clockhd', {
	info = {
			lod_pixels = {1,20,50,0},
			bounding_radius = 30,
   			},
	static = function(lod)
		load_obj('church_new_pyr.obj',matrix.rotate(.5*math.pi,v(-1,0,0)))
	end
})

define_model('church_3k_0', {
	info = {
			lod_pixels = {.1,20,50,0},
			bounding_radius = 30,
			materials={'default', 'glow', 'cutout', 'hour', 'min'},
			},
	static = function(lod)
		if lod > 1 then
			set_material('default', .5,.5,.45,1,.5,.5,.6,10)
			set_material('cutout', .65,.6,.55,.9,.55,.5,.5,10)
			set_material('glow', .5,.5,.5,1,1,1.5,2,100,.6,1.2,1.2)
			set_material('hour', .7,.1,.1,1,.3,.3,.3,30)
			set_material('min', .2,.5,.6,1,.3,.3,.3,30)

			use_material('default')
		 	texture('conc.png')
			load_obj('church_new_0.obj')

			use_material('glow')
	 		texture('glow.png')
			load_obj('church_new_win.obj')

			use_material('cutout')
			texture('door.png',v(.5,.13,0),v(.445,0,0),v(0,.52,0))
			zbias(1,v(0,1.2,16.897),v(0,0,1))
			circle(4,v(0,1.2,16.897),v(0,0,1),v(1,0,0),1)
			zbias(0)
		end
	end,

	dynamic = function(lod)
		local minutePos = -2*math.pi * get_time('HOURS')
		local hourPos = minutePos / 12

		use_material('min')
		zbias(1,v(0,34,0),v(0,1,0))
		call_model('church_3k_clockhd', v(0,35,0),v(math.cos(minutePos),0,math.sin(minutePos)),v(math.cos(minutePos+math.pi*0.5),0, math.sin(minutePos+math.pi*0.5)), 1.5)

		use_material('hour')
		zbias(2,v(0,34,0),v(0,1,0))
		call_model('church_3k_clockhd', v(0,35,0),v(math.cos(hourPos),0,math.sin(hourPos)),v(math.cos(hourPos+math.pi*0.5),0, math.sin(hourPos+math.pi*0.5)), 1.5)
		zbias(0)
	end
})

define_model('arco01_rot', {
	info = {
			scale = 1,
			lod_pixels = {.1,100,200,0},
			bounding_radius = 500,
			materials = {'grass', 'steel', 'gravel', 'metal', 'chrome', 'lake', 'wins_on', 'wins_off', 'dome', 'cutout'},
			},

	static = function(lod)
		if lod > 1 then
			set_material('steel', .63,.7,.83,1,1.26,1.4,1.66,30)
			use_material('steel')
				if lod > 3 then
					texture('bot5.png',v(.5,.5,0),v(.0019,0,0),v(0,0,1))
				elseif lod > 2 then
					texture('bot5_m.png',v(.5,.5,0),v(.0019,0,0),v(0,0,1))
				else
		   			texture('bot5_s.png',v(.5,.5,0),v(.0019,0,0),v(0,0,1))
				end
		end
		tube(16*lod,v(0,480,0),v(0,520,0),v(1,0,0),230,250)

		if lod > 1 then
			set_material('cutout', .65,.6,.55,.9,.55,.5,.5,10)
			set_material('wins_on', .2,.33,.35,.9,1.5,1.8,2,100,1.4,1.6,1.8)
			set_material('wins_off', .2,.33,.35,.9,1.5,1.8,2,100)
			set_material('lake', .4,.5,.5,1,.3,.4,.5,50)
			set_material('gravel', .3,.31,.3,1,.3,.3,.3,5)
			set_material('grass', .2,.3,0,1,.3,.3,.3,5)
			set_material('metal', .5,.55,.55,1,.35,.38,.4,10)

			use_material('grass')
			if lod > 2 then
				texture('rgh.png',v(.5,.5,0),v(.05,0,0),v(0,0,1))
			else
				texture('rgh_s.png',v(.5,.5,0),v(.05,0,0),v(0,0,1))
			end
			circle(16,v(0,515,0),v(0,1,0),v(1,0,0),245)

			zbias(1,v(0,515,0), v(0,1,0))
			cubic_bezier_quad(lod,lod,
					v(-20,514,60), v(-60,514,80), v(-120,514,80), v(-160,514,90),
					v(0,514,100), v(-60,600,100), v(-120,514,100), v(-160,514,100),
					v(0,514,120), v(-60,514,120), v(-120,530,120), v(-160,514,120),
					v(-20,514,160), v(-60,514,180), v(-120,514,180), v(-160,514,160))

			use_material('gravel')
			if lod > 2 then
				texture('grav.png')
			else
				texture('grav_s.png')
			end

			quad(v(247,515,5), v(247,515,-5), v(-247,515,-5), v(-247,515,5))
			quad(v(5,515,247), v(5,515,-247), v(-5,515,-247), v(-5,515,247))

			circle(4*lod,v(0,515,0),v(0,1,0),v(0,0,1),40)
			zbias(0)

			zbias(1,v(0,500,0), v(0,1,0))
   			texture('win0.png')
			use_material('wins_on')
			load_obj('wins_on.obj',matrix.scale(v(10.02,10,10.02)))

			use_material('wins_off')
			load_obj('wins_off.obj',matrix.scale(v(10.02,10,10.02)))


			---[[
			texture('wtr.png',v(.5,.5,0), v(.015,0,0),v(0,0,-1))
			use_material('lake')
			zbias(1,v(0,515,0),v(0,1,0))
				flat(3*lod,v(0,1,0),{v(-40,515,80), v(-50,515,40)}, {v(-60,515,-10),v(-100,515,60),v(-120,515,50)},{v(-140,515,50), v(-140,515,70)}, {v(-140,515,80),v(-120,515,80)})
			zbias(0)

			--]]
			---[[
			call_model('combo_twin_i', v(-40,515,180), v(1,0,-1),v(0,1,0),1.25)
			call_model('combo_twin_i', v(60,515,180), v(1,0,-1),v(0,1,0),1.25)

			call_model('combo_tri_i', v(40,515,50), v(1,0,0),v(0,1,0),1.25)

			call_model('combo_tri_i', v(-130,515,55), v(0,0,-1),v(0,1,0),1.25)

			call_model('combo_twin_i', v(120,515,-100), v(1,0,1),v(0,1,0),1.25)
			call_model('combo_twin_i', v(60,515,-180), v(1,0,1),v(0,1,0),1.25)

			call_model('combo_tri_i', v(30,515,100), v(0,0,1),v(0,1,0),1.25)

   			call_model('combo_tri_i', v(140,515,-50), v(0,0,1),v(0,1,0),1.25)
   			call_model('combo_tri_i', v(80,515,-30), v(0,0,-1),v(0,1,0),1.25)

   			call_model('combo_twin_i', v(-45,515,-155), v(1,0,0),v(0,1,0),1.25)
   			call_model('combo_twin_i', v(-25,515,-110), v(0,0,-1),v(0,1,0),1.25)
   			call_model('combo_twin_i', v(-25,515,-60), v(0,0,-1),v(0,1,0),1.25)

			call_model('combo_twin_i', v(-170,515,90), v(-1,0,-1),v(0,1,0),1.25)

			call_model('combo_tri_i', v(100,515,80), v(-1,0,0),v(0,1,0),1.25)
			call_model('combo_tri_i', v(180,515,100), v(-1,0,0),v(0,1,0),1.25)

			call_model('combo_tri_i', v(-200,515,-30), v(1,0,0),v(0,1,0),1.25)
			call_model('combo_tri_i', v(-180,515,-80), v(1,0,0),v(0,1,0),1.25)
			--]]
			call_model('woods_0',v(60,515,-120), v(.5,0,-1),v(0,1,0),1.25)
			call_model('woods_1',v(160,515,-40), v(1,0,0),v(0,1,0),1.25)

			call_model('woods_0',v(140,515,80), v(0,0,1),v(0,1,0),1.25)
			call_model('woods_1',v(50,515,50), v(-1,0,1),v(0,1,0),1.25)

			call_model('woods_1',v(10,515,180), v(1,0,.2),v(0,1,0),1.25)
			call_model('woods_0',v(-80,515,110), v(-1,0,0),v(0,1,0),1.25)
			call_model('woods_1',v(-145,515,40), v(-.4,0,-1),v(0,1,0),1.25)

			call_model('woods_0',v(-80,515,-50), v(1,0,0),v(0,1,0),1.25)
			call_model('woods_1',v(-40,515,-160), v(1,0,0),v(0,1,0),1.25)

			call_model('church_3k_0',v(0,515,0), v(1,0,0),v(0,1,0),1.5)

			-- import from church_3k_0
			use_material('cutout')
			if lod > 3 then
			   	texture('church_new_clock.png',v(.5,.5,0), v(.05,0,0),v(0,0,1))
			elseif lod > 2 then
				texture('church_new_clock_m.png',v(.5,.5,0), v(.05,0,0),v(0,0,1))
			else
				texture('church_new_clock_s.png',v(.5,.5,0), v(.05,0,0),v(0,0,1))
			end
   			sphere_slice(6*lod,3*lod, 0, math.pi, matrix.translate(v(0,566,0)) * matrix.scale(v(-12,-10.5,-12)))
	  		sphere_slice(6*lod,3*lod, 0, math.pi, matrix.translate(v(0,566,0)) * matrix.scale(v(12.5,10.51,12.5)))
		end

	end
})

define_model('arco_01', {
	info = {
			scale = .8,
			lod_pixels = {.1,200,500,0},
			bounding_radius = 200,
			materials = {'grass', 'concrete', 'gravel', 'steel', 'text', 'metal', 'chrome', 'win', 'dome'},
			tags = {'city_building'},
			},

	static = function(lod)
		if lod > 1 then
			set_material('steel', .63,.7,.83,1,1.26,1.4,1.66,30)
			set_material('dome', 0,.5,1,.3,1,1.5,2,100)
			set_material('grass', .2,.3,0,1,.3,.3,.3,5)
			set_material('concrete',.7,.7,.6,1,.3,.3,.3,5)
			set_material('gravel', .3,.31,.3,1,.3,.3,.3,5)
			set_material('metal', .5,.55,.55,1,.35,.38,.4,10)
			set_material('text', .5,.5,0,1,0,0,0,0,.5,.5,0)
			set_material('dome', 0,.5,1,.3,1,1.5,2,100)

			use_material('concrete')
			texture('conc.png',v(.5,.5,0),v(.002,0,0),v(0,0,1))
		end
		tapered_cylinder(16*lod,v(0,-200,0),v(0,400,0),v(1,0,0),100,50)

		if lod > 1 then
			use_material('steel')
			if lod > 3 then

				texture('bot5.png',v(.5,.5,0),v(.002,0,0),v(0,0,1))
			elseif lod > 2 then
			   	texture('bot5_m.png',v(.5,.5,0),v(.002,0,0),v(0,0,1))
			else
				texture('bot5_s.png',v(.5,.5,0),v(.002,0,0),v(0,0,1))
	  		end
		end
		tapered_cylinder(16*lod,v(0,400,0),v(0,480,0),v(1,0,0),50,250)

		if lod > 1 then
			use_material('steel')
			texture('pan0.png',v(.5,.5,0),v(.01,0,0),v(0,.01,0))
		end
		xref_flat(8*lod,v(0,0,1), {v(49,400,10)}, {v(65,200,10)}, {v(50,400,10), v(250,480,10)})
		xref_flat(8*lod,v(0,0,-1), {v(-49,400,-10)}, {v(-65,200,-10)}, {v(-50,400,-10), v(-250,480,-10)})

		if lod > 1 then
			texture('pan0.png',v(.5,.5,0),v(-.01,0,0),v(0,.01,0))
		end
		quadric_bezier_quad(8*lod,1,v(10,200,65), v(10,400,50), v(10,480,250),
									v(0,200,65), v(0,400,50), v(0,480,250),
									v(-10,200,65), v(-10,400,50), v(-10,480,250))

		quadric_bezier_quad(8*lod,1,v(-10,200,-65), v(-10,400,-50), v(-10,480,-250),
									v(0,200,-65), v(0,400,-50), v(0,480,-250),
									v(10,200,-65), v(10,400,-50), v(10,480,-250))

		if lod > 1 then
			texture('pan0.png',v(.5,.5,0),v(0,0,1),v(0,.01,0))
		end
		xref_flat(8*lod,v(-1,0,0), {v(-10,400,49)}, {v(-10,200,65)}, {v(-10,400,50), v(-10,480,250)})
		xref_flat(8*lod,v(1,0,0), {v(10,400,-49)}, {v(10,200,-65)}, {v(10,400,-50), v(10,480,-250)})

		if lod > 1 then
			texture('pan0.png',v(.5,.5,0),v(0,0,-1),v(0,.01,0))
		end
		xref_quadric_bezier_quad(8*lod,1,	v(65,200,-10), v(50,400,-10), v(250,480,-10),
											v(65,200,0), v(50,400,0), v(250,480,0),
											v(65,200,10), v(50,400,10), v(250,480,10))

		--arco_lift_1(lod)


		---[[
		call_model('arco01_rot', v(0,0,0), v(1,0,0), v(0,1,0),1)
		texture(nil)
		use_material('dome')

		sphere_slice(12*lod,4*lod,0,.3*math.pi, matrix.translate(v(0,340,0)) * matrix.scale(v(305,305,305)))
		--]]
		--[[
		if lod == 1 then
			call_model('arco01_rot', v(0,0,0), v(1,0,0), v(0,1,0),1)
			texture(nil)
			sphere_slice(12*lod,4*lod,0,.3*math.pi, matrix.translate(v(0,340,0)) * matrix.scale(v(305,305,305)))
		end

  	end,

	dynamic = function(lod)
		if lod > 1 then
			local rot = math.pi*get_time('HOURS')/12
	  		call_model('arco01_rot', v(0,0,0), v(math.cos(rot),0,math.sin(rot)), v(0,1,0),1)

			texture(nil)
			use_material('dome')
	  		sphere_slice(12*lod,4*lod,0,.3*math.pi, matrix.translate(v(0,340,0)) * matrix.scale(v(305,305,305)))
		end --]]
  	end

})
