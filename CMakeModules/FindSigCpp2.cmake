# This module defines XXX_FOUND, XXX_INCLUDE_DIRS and XXX_LIBRARIES standard variables
# By Sukender (Benoit NEIL), under the terms of the WTFPL
#
# Accepts ADDITIONAL_VERSIONS to search for non-harcoded versions

set(FINDNAME SIGCPP)
set(VERSIONS ${ADDITIONAL_VERSIONS} "2_0" "2.0" "2_2_8" "2.2.8")

set(CUR_HINTS
	$ENV{${FINDNAME}_DIR}
	$ENV{${FINDNAME}DIR}
	$ENV{${FINDNAME}_PATH}
	$ENV{${FINDNAME}PATH}
)

SET(MSVC_YEAR_NAME)
IF (MSVC_VERSION GREATER 1599)		# >= 1600
	SET(MSVC_YEAR_NAME vc2010)
ELSEIF(MSVC_VERSION GREATER 1499)	# >= 1500
	SET(MSVC_YEAR_NAME vc90)
ELSEIF(MSVC_VERSION GREATER 1399)	# >= 1400
	SET(MSVC_YEAR_NAME vc80)
ENDIF()

FOREACH(CURVER ${VERSIONS})
	FIND_PATH(${FINDNAME}_INCLUDE_DIR
		NAMES sigc++/sigc++.h
		HINTS ${CUR_HINTS}
		PATH_SUFFIXES include include/sigc++ "include/sigc++-${CURVER}"
	)
	FIND_PATH(${FINDNAME}_INCLUDE_DIR_CONFIG
		NAMES sigc++config.h
		HINTS ${CUR_HINTS}
		PATH_SUFFIXES include include/sigc++ "include/sigc++-${CURVER}" sigc++/include "sigc++-${CURVER}/include"
		PATHS /usr/local/lib /usr/lib /lib
	)
	set(${FINDNAME}_INCLUDE_DIRS "${${FINDNAME}_INCLUDE_DIR}" "${${FINDNAME}_INCLUDE_DIR_CONFIG}")
ENDFOREACH()

FOREACH(CURVER ${VERSIONS})
	FIND_LIBRARY(${FINDNAME}_LIBRARY 
		NAMES "sigc-${MSVC_YEAR_NAME}-${CURVER}" "sigc-${CURVER}"
		HINTS ${CUR_HINTS}
		PATH_SUFFIXES lib64 lib
	)

	FIND_LIBRARY(${FINDNAME}_LIBRARY_DEBUG 
		NAMES "sigc-${MSVC_YEAR_NAME}-d-${CURVER}" "sigc-d-${CURVER}"
		HINTS ${CUR_HINTS}
		PATH_SUFFIXES lib64 lib
	)

	IF(${FINDNAME}_LIBRARY)
		break()
	ENDIF()
ENDFOREACH()

if (NOT ${FINDNAME}_LIBRARY)
	FIND_LIBRARY(${FINDNAME}_LIBRARY 
		NAMES sigc sigcpp sigc++
		HINTS ${CUR_HINTS}
		PATH_SUFFIXES lib64 lib
	)

	FIND_LIBRARY(${FINDNAME}_LIBRARY_DEBUG 
		NAMES sigcd sigc-d sigcppd sigcpp-d sigc++d sigc++-d
		HINTS ${CUR_HINTS}
		PATH_SUFFIXES lib64 lib
	)
endif()

IF(${FINDNAME}_LIBRARY)
	IF(${FINDNAME}_LIBRARY_DEBUG)
		SET(${FINDNAME}_LIBRARIES optimized "${${FINDNAME}_LIBRARY}" debug "${${FINDNAME}_LIBRARY_DEBUG}")
	ELSE()
		SET(${FINDNAME}_LIBRARIES "${${FINDNAME}_LIBRARY}")		# Could add "general" keyword, but it is optional
	ENDIF()
	break()
ENDIF()

# handle the QUIETLY and REQUIRED arguments and set XXX_FOUND to TRUE if all listed variables are TRUE
INCLUDE(FindPackageHandleStandardArgs)
FIND_PACKAGE_HANDLE_STANDARD_ARGS(${FINDNAME} DEFAULT_MSG ${FINDNAME}_LIBRARIES ${FINDNAME}_INCLUDE_DIR)
