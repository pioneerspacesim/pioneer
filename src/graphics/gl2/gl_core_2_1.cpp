#include <algorithm>
#include <vector>
#include <string.h>
#include <stddef.h>
#include "gl_core_2_1.hpp"

#if defined(__APPLE__)
#include <dlfcn.h>

static void* AppleGLGetProcAddress (const char *name)
{
	static void* image = NULL;
	
	if (NULL == image)
		image = dlopen("/System/Library/Frameworks/OpenGL.framework/Versions/Current/OpenGL", RTLD_LAZY);

	return (image ? dlsym(image, name) : NULL);
}
#endif /* __APPLE__ */

#if defined(__sgi) || defined (__sun)
#include <dlfcn.h>
#include <stdio.h>

static void* SunGetProcAddress (const GLubyte* name)
{
  static void* h = NULL;
  static void* gpa;

  if (h == NULL)
  {
    if ((h = dlopen(NULL, RTLD_LAZY | RTLD_LOCAL)) == NULL) return NULL;
    gpa = dlsym(h, "glXGetProcAddress");
  }

  if (gpa != NULL)
    return ((void*(*)(const GLubyte*))gpa)(name);
  else
    return dlsym(h, (const char*)name);
}
#endif /* __sgi || __sun */

#if defined(_WIN32)

#ifdef _MSC_VER
#pragma warning(disable: 4055)
#pragma warning(disable: 4054)
#pragma warning(disable: 4996)
#endif

static int TestPointer(const PROC pTest)
{
	ptrdiff_t iTest;
	if(!pTest) return 0;
	iTest = (ptrdiff_t)pTest;
	
	if(iTest == 1 || iTest == 2 || iTest == 3 || iTest == -1) return 0;
	
	return 1;
}

static PROC WinGetProcAddress(const char *name)
{
	HMODULE glMod = NULL;
	PROC pFunc = wglGetProcAddress((LPCSTR)name);
	if(TestPointer(pFunc))
	{
		return pFunc;
	}
	glMod = GetModuleHandleA("OpenGL32.dll");
	return (PROC)GetProcAddress(glMod, (LPCSTR)name);
}
	
#define IntGetProcAddress(name) WinGetProcAddress(name)
#else
	#if defined(__APPLE__)
		#define IntGetProcAddress(name) AppleGLGetProcAddress(name)
	#else
		#if defined(__sgi) || defined(__sun)
			#define IntGetProcAddress(name) SunGetProcAddress(name)
		#else /* GLX */
		    #include <GL/glx.h>

			#define IntGetProcAddress(name) (*glXGetProcAddressARB)((const GLubyte*)name)
		#endif
	#endif
#endif

namespace gl21
{
	namespace gl
	{
		namespace exts
		{
			LoadTest var_ARB_seamless_cube_map;
			LoadTest var_ARB_seamless_cubemap_per_texture;
			LoadTest var_ARB_draw_instanced;
			LoadTest var_ARB_uniform_buffer_object;
			LoadTest var_ARB_instanced_arrays;
			LoadTest var_ARB_vertex_array_object;
			LoadTest var_EXT_framebuffer_object;
			LoadTest var_EXT_texture_compression_s3tc;
			LoadTest var_EXT_texture_sRGB;
			LoadTest var_EXT_texture_filter_anisotropic;
			
		} //namespace exts
		typedef void (CODEGEN_FUNCPTR *PFNGLDRAWARRAYSINSTANCEDARB)(GLenum, GLint, GLsizei, GLsizei);
		PFNGLDRAWARRAYSINSTANCEDARB glDrawArraysInstancedARB = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLDRAWELEMENTSINSTANCEDARB)(GLenum, GLsizei, GLenum, const void *, GLsizei);
		PFNGLDRAWELEMENTSINSTANCEDARB glDrawElementsInstancedARB = 0;
		
		static int Load_ARB_draw_instanced()
		{
			int numFailed = 0;
			glDrawArraysInstancedARB = reinterpret_cast<PFNGLDRAWARRAYSINSTANCEDARB>(IntGetProcAddress("glDrawArraysInstancedARB"));
			if(!glDrawArraysInstancedARB) ++numFailed;
			glDrawElementsInstancedARB = reinterpret_cast<PFNGLDRAWELEMENTSINSTANCEDARB>(IntGetProcAddress("glDrawElementsInstancedARB"));
			if(!glDrawElementsInstancedARB) ++numFailed;
			return numFailed;
		}
		
		typedef void (CODEGEN_FUNCPTR *PFNGLBINDBUFFERBASE)(GLenum, GLuint, GLuint);
		PFNGLBINDBUFFERBASE glBindBufferBase = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLBINDBUFFERRANGE)(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr);
		PFNGLBINDBUFFERRANGE glBindBufferRange = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETACTIVEUNIFORMBLOCKNAME)(GLuint, GLuint, GLsizei, GLsizei *, GLchar *);
		PFNGLGETACTIVEUNIFORMBLOCKNAME glGetActiveUniformBlockName = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETACTIVEUNIFORMBLOCKIV)(GLuint, GLuint, GLenum, GLint *);
		PFNGLGETACTIVEUNIFORMBLOCKIV glGetActiveUniformBlockiv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETACTIVEUNIFORMNAME)(GLuint, GLuint, GLsizei, GLsizei *, GLchar *);
		PFNGLGETACTIVEUNIFORMNAME glGetActiveUniformName = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETACTIVEUNIFORMSIV)(GLuint, GLsizei, const GLuint *, GLenum, GLint *);
		PFNGLGETACTIVEUNIFORMSIV glGetActiveUniformsiv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETINTEGERI_V)(GLenum, GLuint, GLint *);
		PFNGLGETINTEGERI_V glGetIntegeri_v = 0;
		typedef GLuint (CODEGEN_FUNCPTR *PFNGLGETUNIFORMBLOCKINDEX)(GLuint, const GLchar *);
		PFNGLGETUNIFORMBLOCKINDEX glGetUniformBlockIndex = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETUNIFORMINDICES)(GLuint, GLsizei, const GLchar *const*, GLuint *);
		PFNGLGETUNIFORMINDICES glGetUniformIndices = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLUNIFORMBLOCKBINDING)(GLuint, GLuint, GLuint);
		PFNGLUNIFORMBLOCKBINDING glUniformBlockBinding = 0;
		
		static int Load_ARB_uniform_buffer_object()
		{
			int numFailed = 0;
			glBindBufferBase = reinterpret_cast<PFNGLBINDBUFFERBASE>(IntGetProcAddress("glBindBufferBase"));
			if(!glBindBufferBase) ++numFailed;
			glBindBufferRange = reinterpret_cast<PFNGLBINDBUFFERRANGE>(IntGetProcAddress("glBindBufferRange"));
			if(!glBindBufferRange) ++numFailed;
			glGetActiveUniformBlockName = reinterpret_cast<PFNGLGETACTIVEUNIFORMBLOCKNAME>(IntGetProcAddress("glGetActiveUniformBlockName"));
			if(!glGetActiveUniformBlockName) ++numFailed;
			glGetActiveUniformBlockiv = reinterpret_cast<PFNGLGETACTIVEUNIFORMBLOCKIV>(IntGetProcAddress("glGetActiveUniformBlockiv"));
			if(!glGetActiveUniformBlockiv) ++numFailed;
			glGetActiveUniformName = reinterpret_cast<PFNGLGETACTIVEUNIFORMNAME>(IntGetProcAddress("glGetActiveUniformName"));
			if(!glGetActiveUniformName) ++numFailed;
			glGetActiveUniformsiv = reinterpret_cast<PFNGLGETACTIVEUNIFORMSIV>(IntGetProcAddress("glGetActiveUniformsiv"));
			if(!glGetActiveUniformsiv) ++numFailed;
			glGetIntegeri_v = reinterpret_cast<PFNGLGETINTEGERI_V>(IntGetProcAddress("glGetIntegeri_v"));
			if(!glGetIntegeri_v) ++numFailed;
			glGetUniformBlockIndex = reinterpret_cast<PFNGLGETUNIFORMBLOCKINDEX>(IntGetProcAddress("glGetUniformBlockIndex"));
			if(!glGetUniformBlockIndex) ++numFailed;
			glGetUniformIndices = reinterpret_cast<PFNGLGETUNIFORMINDICES>(IntGetProcAddress("glGetUniformIndices"));
			if(!glGetUniformIndices) ++numFailed;
			glUniformBlockBinding = reinterpret_cast<PFNGLUNIFORMBLOCKBINDING>(IntGetProcAddress("glUniformBlockBinding"));
			if(!glUniformBlockBinding) ++numFailed;
			return numFailed;
		}
		
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEXATTRIBDIVISORARB)(GLuint, GLuint);
		PFNGLVERTEXATTRIBDIVISORARB glVertexAttribDivisorARB = 0;
		
		static int Load_ARB_instanced_arrays()
		{
			int numFailed = 0;
			glVertexAttribDivisorARB = reinterpret_cast<PFNGLVERTEXATTRIBDIVISORARB>(IntGetProcAddress("glVertexAttribDivisorARB"));
			if(!glVertexAttribDivisorARB) ++numFailed;
			return numFailed;
		}
		
		typedef void (CODEGEN_FUNCPTR *PFNGLBINDVERTEXARRAY)(GLuint);
		PFNGLBINDVERTEXARRAY glBindVertexArray = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLDELETEVERTEXARRAYS)(GLsizei, const GLuint *);
		PFNGLDELETEVERTEXARRAYS glDeleteVertexArrays = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGENVERTEXARRAYS)(GLsizei, GLuint *);
		PFNGLGENVERTEXARRAYS glGenVertexArrays = 0;
		typedef GLboolean (CODEGEN_FUNCPTR *PFNGLISVERTEXARRAY)(GLuint);
		PFNGLISVERTEXARRAY glIsVertexArray = 0;
		
		static int Load_ARB_vertex_array_object()
		{
			int numFailed = 0;
			glBindVertexArray = reinterpret_cast<PFNGLBINDVERTEXARRAY>(IntGetProcAddress("glBindVertexArray"));
			if(!glBindVertexArray) ++numFailed;
			glDeleteVertexArrays = reinterpret_cast<PFNGLDELETEVERTEXARRAYS>(IntGetProcAddress("glDeleteVertexArrays"));
			if(!glDeleteVertexArrays) ++numFailed;
			glGenVertexArrays = reinterpret_cast<PFNGLGENVERTEXARRAYS>(IntGetProcAddress("glGenVertexArrays"));
			if(!glGenVertexArrays) ++numFailed;
			glIsVertexArray = reinterpret_cast<PFNGLISVERTEXARRAY>(IntGetProcAddress("glIsVertexArray"));
			if(!glIsVertexArray) ++numFailed;
			return numFailed;
		}
		
		typedef void (CODEGEN_FUNCPTR *PFNGLBINDFRAMEBUFFEREXT)(GLenum, GLuint);
		PFNGLBINDFRAMEBUFFEREXT glBindFramebufferEXT = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLBINDRENDERBUFFEREXT)(GLenum, GLuint);
		PFNGLBINDRENDERBUFFEREXT glBindRenderbufferEXT = 0;
		typedef GLenum (CODEGEN_FUNCPTR *PFNGLCHECKFRAMEBUFFERSTATUSEXT)(GLenum);
		PFNGLCHECKFRAMEBUFFERSTATUSEXT glCheckFramebufferStatusEXT = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLDELETEFRAMEBUFFERSEXT)(GLsizei, const GLuint *);
		PFNGLDELETEFRAMEBUFFERSEXT glDeleteFramebuffersEXT = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLDELETERENDERBUFFERSEXT)(GLsizei, const GLuint *);
		PFNGLDELETERENDERBUFFERSEXT glDeleteRenderbuffersEXT = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLFRAMEBUFFERRENDERBUFFEREXT)(GLenum, GLenum, GLenum, GLuint);
		PFNGLFRAMEBUFFERRENDERBUFFEREXT glFramebufferRenderbufferEXT = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLFRAMEBUFFERTEXTURE1DEXT)(GLenum, GLenum, GLenum, GLuint, GLint);
		PFNGLFRAMEBUFFERTEXTURE1DEXT glFramebufferTexture1DEXT = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLFRAMEBUFFERTEXTURE2DEXT)(GLenum, GLenum, GLenum, GLuint, GLint);
		PFNGLFRAMEBUFFERTEXTURE2DEXT glFramebufferTexture2DEXT = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLFRAMEBUFFERTEXTURE3DEXT)(GLenum, GLenum, GLenum, GLuint, GLint, GLint);
		PFNGLFRAMEBUFFERTEXTURE3DEXT glFramebufferTexture3DEXT = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGENFRAMEBUFFERSEXT)(GLsizei, GLuint *);
		PFNGLGENFRAMEBUFFERSEXT glGenFramebuffersEXT = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGENRENDERBUFFERSEXT)(GLsizei, GLuint *);
		PFNGLGENRENDERBUFFERSEXT glGenRenderbuffersEXT = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGENERATEMIPMAPEXT)(GLenum);
		PFNGLGENERATEMIPMAPEXT glGenerateMipmapEXT = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXT)(GLenum, GLenum, GLenum, GLint *);
		PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXT glGetFramebufferAttachmentParameterivEXT = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETRENDERBUFFERPARAMETERIVEXT)(GLenum, GLenum, GLint *);
		PFNGLGETRENDERBUFFERPARAMETERIVEXT glGetRenderbufferParameterivEXT = 0;
		typedef GLboolean (CODEGEN_FUNCPTR *PFNGLISFRAMEBUFFEREXT)(GLuint);
		PFNGLISFRAMEBUFFEREXT glIsFramebufferEXT = 0;
		typedef GLboolean (CODEGEN_FUNCPTR *PFNGLISRENDERBUFFEREXT)(GLuint);
		PFNGLISRENDERBUFFEREXT glIsRenderbufferEXT = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLRENDERBUFFERSTORAGEEXT)(GLenum, GLenum, GLsizei, GLsizei);
		PFNGLRENDERBUFFERSTORAGEEXT glRenderbufferStorageEXT = 0;
		
		static int Load_EXT_framebuffer_object()
		{
			int numFailed = 0;
			glBindFramebufferEXT = reinterpret_cast<PFNGLBINDFRAMEBUFFEREXT>(IntGetProcAddress("glBindFramebufferEXT"));
			if(!glBindFramebufferEXT) ++numFailed;
			glBindRenderbufferEXT = reinterpret_cast<PFNGLBINDRENDERBUFFEREXT>(IntGetProcAddress("glBindRenderbufferEXT"));
			if(!glBindRenderbufferEXT) ++numFailed;
			glCheckFramebufferStatusEXT = reinterpret_cast<PFNGLCHECKFRAMEBUFFERSTATUSEXT>(IntGetProcAddress("glCheckFramebufferStatusEXT"));
			if(!glCheckFramebufferStatusEXT) ++numFailed;
			glDeleteFramebuffersEXT = reinterpret_cast<PFNGLDELETEFRAMEBUFFERSEXT>(IntGetProcAddress("glDeleteFramebuffersEXT"));
			if(!glDeleteFramebuffersEXT) ++numFailed;
			glDeleteRenderbuffersEXT = reinterpret_cast<PFNGLDELETERENDERBUFFERSEXT>(IntGetProcAddress("glDeleteRenderbuffersEXT"));
			if(!glDeleteRenderbuffersEXT) ++numFailed;
			glFramebufferRenderbufferEXT = reinterpret_cast<PFNGLFRAMEBUFFERRENDERBUFFEREXT>(IntGetProcAddress("glFramebufferRenderbufferEXT"));
			if(!glFramebufferRenderbufferEXT) ++numFailed;
			glFramebufferTexture1DEXT = reinterpret_cast<PFNGLFRAMEBUFFERTEXTURE1DEXT>(IntGetProcAddress("glFramebufferTexture1DEXT"));
			if(!glFramebufferTexture1DEXT) ++numFailed;
			glFramebufferTexture2DEXT = reinterpret_cast<PFNGLFRAMEBUFFERTEXTURE2DEXT>(IntGetProcAddress("glFramebufferTexture2DEXT"));
			if(!glFramebufferTexture2DEXT) ++numFailed;
			glFramebufferTexture3DEXT = reinterpret_cast<PFNGLFRAMEBUFFERTEXTURE3DEXT>(IntGetProcAddress("glFramebufferTexture3DEXT"));
			if(!glFramebufferTexture3DEXT) ++numFailed;
			glGenFramebuffersEXT = reinterpret_cast<PFNGLGENFRAMEBUFFERSEXT>(IntGetProcAddress("glGenFramebuffersEXT"));
			if(!glGenFramebuffersEXT) ++numFailed;
			glGenRenderbuffersEXT = reinterpret_cast<PFNGLGENRENDERBUFFERSEXT>(IntGetProcAddress("glGenRenderbuffersEXT"));
			if(!glGenRenderbuffersEXT) ++numFailed;
			glGenerateMipmapEXT = reinterpret_cast<PFNGLGENERATEMIPMAPEXT>(IntGetProcAddress("glGenerateMipmapEXT"));
			if(!glGenerateMipmapEXT) ++numFailed;
			glGetFramebufferAttachmentParameterivEXT = reinterpret_cast<PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXT>(IntGetProcAddress("glGetFramebufferAttachmentParameterivEXT"));
			if(!glGetFramebufferAttachmentParameterivEXT) ++numFailed;
			glGetRenderbufferParameterivEXT = reinterpret_cast<PFNGLGETRENDERBUFFERPARAMETERIVEXT>(IntGetProcAddress("glGetRenderbufferParameterivEXT"));
			if(!glGetRenderbufferParameterivEXT) ++numFailed;
			glIsFramebufferEXT = reinterpret_cast<PFNGLISFRAMEBUFFEREXT>(IntGetProcAddress("glIsFramebufferEXT"));
			if(!glIsFramebufferEXT) ++numFailed;
			glIsRenderbufferEXT = reinterpret_cast<PFNGLISRENDERBUFFEREXT>(IntGetProcAddress("glIsRenderbufferEXT"));
			if(!glIsRenderbufferEXT) ++numFailed;
			glRenderbufferStorageEXT = reinterpret_cast<PFNGLRENDERBUFFERSTORAGEEXT>(IntGetProcAddress("glRenderbufferStorageEXT"));
			if(!glRenderbufferStorageEXT) ++numFailed;
			return numFailed;
		}
		
		typedef void (CODEGEN_FUNCPTR *PFNGLACCUM)(GLenum, GLfloat);
		PFNGLACCUM glAccum = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLALPHAFUNC)(GLenum, GLfloat);
		PFNGLALPHAFUNC glAlphaFunc = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLBEGIN)(GLenum);
		PFNGLBEGIN glBegin = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLBITMAP)(GLsizei, GLsizei, GLfloat, GLfloat, GLfloat, GLfloat, const GLubyte *);
		PFNGLBITMAP glBitmap = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLBLENDFUNC)(GLenum, GLenum);
		PFNGLBLENDFUNC glBlendFunc = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCALLLIST)(GLuint);
		PFNGLCALLLIST glCallList = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCALLLISTS)(GLsizei, GLenum, const void *);
		PFNGLCALLLISTS glCallLists = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCLEAR)(GLbitfield);
		PFNGLCLEAR glClear = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCLEARACCUM)(GLfloat, GLfloat, GLfloat, GLfloat);
		PFNGLCLEARACCUM glClearAccum = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCLEARCOLOR)(GLfloat, GLfloat, GLfloat, GLfloat);
		PFNGLCLEARCOLOR glClearColor = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCLEARDEPTH)(GLdouble);
		PFNGLCLEARDEPTH glClearDepth = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCLEARINDEX)(GLfloat);
		PFNGLCLEARINDEX glClearIndex = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCLEARSTENCIL)(GLint);
		PFNGLCLEARSTENCIL glClearStencil = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCLIPPLANE)(GLenum, const GLdouble *);
		PFNGLCLIPPLANE glClipPlane = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCOLOR3B)(GLbyte, GLbyte, GLbyte);
		PFNGLCOLOR3B glColor3b = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCOLOR3BV)(const GLbyte *);
		PFNGLCOLOR3BV glColor3bv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCOLOR3D)(GLdouble, GLdouble, GLdouble);
		PFNGLCOLOR3D glColor3d = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCOLOR3DV)(const GLdouble *);
		PFNGLCOLOR3DV glColor3dv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCOLOR3F)(GLfloat, GLfloat, GLfloat);
		PFNGLCOLOR3F glColor3f = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCOLOR3FV)(const GLfloat *);
		PFNGLCOLOR3FV glColor3fv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCOLOR3I)(GLint, GLint, GLint);
		PFNGLCOLOR3I glColor3i = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCOLOR3IV)(const GLint *);
		PFNGLCOLOR3IV glColor3iv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCOLOR3S)(GLshort, GLshort, GLshort);
		PFNGLCOLOR3S glColor3s = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCOLOR3SV)(const GLshort *);
		PFNGLCOLOR3SV glColor3sv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCOLOR3UB)(GLubyte, GLubyte, GLubyte);
		PFNGLCOLOR3UB glColor3ub = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCOLOR3UBV)(const GLubyte *);
		PFNGLCOLOR3UBV glColor3ubv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCOLOR3UI)(GLuint, GLuint, GLuint);
		PFNGLCOLOR3UI glColor3ui = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCOLOR3UIV)(const GLuint *);
		PFNGLCOLOR3UIV glColor3uiv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCOLOR3US)(GLushort, GLushort, GLushort);
		PFNGLCOLOR3US glColor3us = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCOLOR3USV)(const GLushort *);
		PFNGLCOLOR3USV glColor3usv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCOLOR4B)(GLbyte, GLbyte, GLbyte, GLbyte);
		PFNGLCOLOR4B glColor4b = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCOLOR4BV)(const GLbyte *);
		PFNGLCOLOR4BV glColor4bv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCOLOR4D)(GLdouble, GLdouble, GLdouble, GLdouble);
		PFNGLCOLOR4D glColor4d = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCOLOR4DV)(const GLdouble *);
		PFNGLCOLOR4DV glColor4dv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCOLOR4F)(GLfloat, GLfloat, GLfloat, GLfloat);
		PFNGLCOLOR4F glColor4f = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCOLOR4FV)(const GLfloat *);
		PFNGLCOLOR4FV glColor4fv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCOLOR4I)(GLint, GLint, GLint, GLint);
		PFNGLCOLOR4I glColor4i = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCOLOR4IV)(const GLint *);
		PFNGLCOLOR4IV glColor4iv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCOLOR4S)(GLshort, GLshort, GLshort, GLshort);
		PFNGLCOLOR4S glColor4s = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCOLOR4SV)(const GLshort *);
		PFNGLCOLOR4SV glColor4sv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCOLOR4UB)(GLubyte, GLubyte, GLubyte, GLubyte);
		PFNGLCOLOR4UB glColor4ub = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCOLOR4UBV)(const GLubyte *);
		PFNGLCOLOR4UBV glColor4ubv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCOLOR4UI)(GLuint, GLuint, GLuint, GLuint);
		PFNGLCOLOR4UI glColor4ui = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCOLOR4UIV)(const GLuint *);
		PFNGLCOLOR4UIV glColor4uiv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCOLOR4US)(GLushort, GLushort, GLushort, GLushort);
		PFNGLCOLOR4US glColor4us = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCOLOR4USV)(const GLushort *);
		PFNGLCOLOR4USV glColor4usv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCOLORMASK)(GLboolean, GLboolean, GLboolean, GLboolean);
		PFNGLCOLORMASK glColorMask = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCOLORMATERIAL)(GLenum, GLenum);
		PFNGLCOLORMATERIAL glColorMaterial = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCOPYPIXELS)(GLint, GLint, GLsizei, GLsizei, GLenum);
		PFNGLCOPYPIXELS glCopyPixels = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCULLFACE)(GLenum);
		PFNGLCULLFACE glCullFace = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLDELETELISTS)(GLuint, GLsizei);
		PFNGLDELETELISTS glDeleteLists = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLDEPTHFUNC)(GLenum);
		PFNGLDEPTHFUNC glDepthFunc = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLDEPTHMASK)(GLboolean);
		PFNGLDEPTHMASK glDepthMask = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLDEPTHRANGE)(GLdouble, GLdouble);
		PFNGLDEPTHRANGE glDepthRange = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLDISABLE)(GLenum);
		PFNGLDISABLE glDisable = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLDRAWBUFFER)(GLenum);
		PFNGLDRAWBUFFER glDrawBuffer = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLDRAWPIXELS)(GLsizei, GLsizei, GLenum, GLenum, const void *);
		PFNGLDRAWPIXELS glDrawPixels = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLEDGEFLAG)(GLboolean);
		PFNGLEDGEFLAG glEdgeFlag = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLEDGEFLAGV)(const GLboolean *);
		PFNGLEDGEFLAGV glEdgeFlagv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLENABLE)(GLenum);
		PFNGLENABLE glEnable = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLEND)(void);
		PFNGLEND glEnd = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLENDLIST)(void);
		PFNGLENDLIST glEndList = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLEVALCOORD1D)(GLdouble);
		PFNGLEVALCOORD1D glEvalCoord1d = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLEVALCOORD1DV)(const GLdouble *);
		PFNGLEVALCOORD1DV glEvalCoord1dv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLEVALCOORD1F)(GLfloat);
		PFNGLEVALCOORD1F glEvalCoord1f = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLEVALCOORD1FV)(const GLfloat *);
		PFNGLEVALCOORD1FV glEvalCoord1fv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLEVALCOORD2D)(GLdouble, GLdouble);
		PFNGLEVALCOORD2D glEvalCoord2d = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLEVALCOORD2DV)(const GLdouble *);
		PFNGLEVALCOORD2DV glEvalCoord2dv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLEVALCOORD2F)(GLfloat, GLfloat);
		PFNGLEVALCOORD2F glEvalCoord2f = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLEVALCOORD2FV)(const GLfloat *);
		PFNGLEVALCOORD2FV glEvalCoord2fv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLEVALMESH1)(GLenum, GLint, GLint);
		PFNGLEVALMESH1 glEvalMesh1 = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLEVALMESH2)(GLenum, GLint, GLint, GLint, GLint);
		PFNGLEVALMESH2 glEvalMesh2 = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLEVALPOINT1)(GLint);
		PFNGLEVALPOINT1 glEvalPoint1 = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLEVALPOINT2)(GLint, GLint);
		PFNGLEVALPOINT2 glEvalPoint2 = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLFEEDBACKBUFFER)(GLsizei, GLenum, GLfloat *);
		PFNGLFEEDBACKBUFFER glFeedbackBuffer = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLFINISH)(void);
		PFNGLFINISH glFinish = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLFLUSH)(void);
		PFNGLFLUSH glFlush = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLFOGF)(GLenum, GLfloat);
		PFNGLFOGF glFogf = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLFOGFV)(GLenum, const GLfloat *);
		PFNGLFOGFV glFogfv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLFOGI)(GLenum, GLint);
		PFNGLFOGI glFogi = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLFOGIV)(GLenum, const GLint *);
		PFNGLFOGIV glFogiv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLFRONTFACE)(GLenum);
		PFNGLFRONTFACE glFrontFace = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLFRUSTUM)(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
		PFNGLFRUSTUM glFrustum = 0;
		typedef GLuint (CODEGEN_FUNCPTR *PFNGLGENLISTS)(GLsizei);
		PFNGLGENLISTS glGenLists = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETBOOLEANV)(GLenum, GLboolean *);
		PFNGLGETBOOLEANV glGetBooleanv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETCLIPPLANE)(GLenum, GLdouble *);
		PFNGLGETCLIPPLANE glGetClipPlane = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETDOUBLEV)(GLenum, GLdouble *);
		PFNGLGETDOUBLEV glGetDoublev = 0;
		typedef GLenum (CODEGEN_FUNCPTR *PFNGLGETERROR)(void);
		PFNGLGETERROR glGetError = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETFLOATV)(GLenum, GLfloat *);
		PFNGLGETFLOATV glGetFloatv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETINTEGERV)(GLenum, GLint *);
		PFNGLGETINTEGERV glGetIntegerv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETLIGHTFV)(GLenum, GLenum, GLfloat *);
		PFNGLGETLIGHTFV glGetLightfv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETLIGHTIV)(GLenum, GLenum, GLint *);
		PFNGLGETLIGHTIV glGetLightiv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETMAPDV)(GLenum, GLenum, GLdouble *);
		PFNGLGETMAPDV glGetMapdv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETMAPFV)(GLenum, GLenum, GLfloat *);
		PFNGLGETMAPFV glGetMapfv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETMAPIV)(GLenum, GLenum, GLint *);
		PFNGLGETMAPIV glGetMapiv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETMATERIALFV)(GLenum, GLenum, GLfloat *);
		PFNGLGETMATERIALFV glGetMaterialfv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETMATERIALIV)(GLenum, GLenum, GLint *);
		PFNGLGETMATERIALIV glGetMaterialiv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETPIXELMAPFV)(GLenum, GLfloat *);
		PFNGLGETPIXELMAPFV glGetPixelMapfv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETPIXELMAPUIV)(GLenum, GLuint *);
		PFNGLGETPIXELMAPUIV glGetPixelMapuiv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETPIXELMAPUSV)(GLenum, GLushort *);
		PFNGLGETPIXELMAPUSV glGetPixelMapusv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETPOLYGONSTIPPLE)(GLubyte *);
		PFNGLGETPOLYGONSTIPPLE glGetPolygonStipple = 0;
		typedef const GLubyte * (CODEGEN_FUNCPTR *PFNGLGETSTRING)(GLenum);
		PFNGLGETSTRING glGetString = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETTEXENVFV)(GLenum, GLenum, GLfloat *);
		PFNGLGETTEXENVFV glGetTexEnvfv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETTEXENVIV)(GLenum, GLenum, GLint *);
		PFNGLGETTEXENVIV glGetTexEnviv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETTEXGENDV)(GLenum, GLenum, GLdouble *);
		PFNGLGETTEXGENDV glGetTexGendv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETTEXGENFV)(GLenum, GLenum, GLfloat *);
		PFNGLGETTEXGENFV glGetTexGenfv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETTEXGENIV)(GLenum, GLenum, GLint *);
		PFNGLGETTEXGENIV glGetTexGeniv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETTEXIMAGE)(GLenum, GLint, GLenum, GLenum, void *);
		PFNGLGETTEXIMAGE glGetTexImage = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETTEXLEVELPARAMETERFV)(GLenum, GLint, GLenum, GLfloat *);
		PFNGLGETTEXLEVELPARAMETERFV glGetTexLevelParameterfv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETTEXLEVELPARAMETERIV)(GLenum, GLint, GLenum, GLint *);
		PFNGLGETTEXLEVELPARAMETERIV glGetTexLevelParameteriv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETTEXPARAMETERFV)(GLenum, GLenum, GLfloat *);
		PFNGLGETTEXPARAMETERFV glGetTexParameterfv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETTEXPARAMETERIV)(GLenum, GLenum, GLint *);
		PFNGLGETTEXPARAMETERIV glGetTexParameteriv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLHINT)(GLenum, GLenum);
		PFNGLHINT glHint = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLINDEXMASK)(GLuint);
		PFNGLINDEXMASK glIndexMask = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLINDEXD)(GLdouble);
		PFNGLINDEXD glIndexd = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLINDEXDV)(const GLdouble *);
		PFNGLINDEXDV glIndexdv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLINDEXF)(GLfloat);
		PFNGLINDEXF glIndexf = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLINDEXFV)(const GLfloat *);
		PFNGLINDEXFV glIndexfv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLINDEXI)(GLint);
		PFNGLINDEXI glIndexi = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLINDEXIV)(const GLint *);
		PFNGLINDEXIV glIndexiv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLINDEXS)(GLshort);
		PFNGLINDEXS glIndexs = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLINDEXSV)(const GLshort *);
		PFNGLINDEXSV glIndexsv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLINITNAMES)(void);
		PFNGLINITNAMES glInitNames = 0;
		typedef GLboolean (CODEGEN_FUNCPTR *PFNGLISENABLED)(GLenum);
		PFNGLISENABLED glIsEnabled = 0;
		typedef GLboolean (CODEGEN_FUNCPTR *PFNGLISLIST)(GLuint);
		PFNGLISLIST glIsList = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLLIGHTMODELF)(GLenum, GLfloat);
		PFNGLLIGHTMODELF glLightModelf = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLLIGHTMODELFV)(GLenum, const GLfloat *);
		PFNGLLIGHTMODELFV glLightModelfv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLLIGHTMODELI)(GLenum, GLint);
		PFNGLLIGHTMODELI glLightModeli = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLLIGHTMODELIV)(GLenum, const GLint *);
		PFNGLLIGHTMODELIV glLightModeliv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLLIGHTF)(GLenum, GLenum, GLfloat);
		PFNGLLIGHTF glLightf = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLLIGHTFV)(GLenum, GLenum, const GLfloat *);
		PFNGLLIGHTFV glLightfv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLLIGHTI)(GLenum, GLenum, GLint);
		PFNGLLIGHTI glLighti = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLLIGHTIV)(GLenum, GLenum, const GLint *);
		PFNGLLIGHTIV glLightiv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLLINESTIPPLE)(GLint, GLushort);
		PFNGLLINESTIPPLE glLineStipple = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLLINEWIDTH)(GLfloat);
		PFNGLLINEWIDTH glLineWidth = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLLISTBASE)(GLuint);
		PFNGLLISTBASE glListBase = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLLOADIDENTITY)(void);
		PFNGLLOADIDENTITY glLoadIdentity = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLLOADMATRIXD)(const GLdouble *);
		PFNGLLOADMATRIXD glLoadMatrixd = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLLOADMATRIXF)(const GLfloat *);
		PFNGLLOADMATRIXF glLoadMatrixf = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLLOADNAME)(GLuint);
		PFNGLLOADNAME glLoadName = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLLOGICOP)(GLenum);
		PFNGLLOGICOP glLogicOp = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLMAP1D)(GLenum, GLdouble, GLdouble, GLint, GLint, const GLdouble *);
		PFNGLMAP1D glMap1d = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLMAP1F)(GLenum, GLfloat, GLfloat, GLint, GLint, const GLfloat *);
		PFNGLMAP1F glMap1f = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLMAP2D)(GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const GLdouble *);
		PFNGLMAP2D glMap2d = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLMAP2F)(GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const GLfloat *);
		PFNGLMAP2F glMap2f = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLMAPGRID1D)(GLint, GLdouble, GLdouble);
		PFNGLMAPGRID1D glMapGrid1d = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLMAPGRID1F)(GLint, GLfloat, GLfloat);
		PFNGLMAPGRID1F glMapGrid1f = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLMAPGRID2D)(GLint, GLdouble, GLdouble, GLint, GLdouble, GLdouble);
		PFNGLMAPGRID2D glMapGrid2d = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLMAPGRID2F)(GLint, GLfloat, GLfloat, GLint, GLfloat, GLfloat);
		PFNGLMAPGRID2F glMapGrid2f = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLMATERIALF)(GLenum, GLenum, GLfloat);
		PFNGLMATERIALF glMaterialf = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLMATERIALFV)(GLenum, GLenum, const GLfloat *);
		PFNGLMATERIALFV glMaterialfv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLMATERIALI)(GLenum, GLenum, GLint);
		PFNGLMATERIALI glMateriali = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLMATERIALIV)(GLenum, GLenum, const GLint *);
		PFNGLMATERIALIV glMaterialiv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLMATRIXMODE)(GLenum);
		PFNGLMATRIXMODE glMatrixMode = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLMULTMATRIXD)(const GLdouble *);
		PFNGLMULTMATRIXD glMultMatrixd = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLMULTMATRIXF)(const GLfloat *);
		PFNGLMULTMATRIXF glMultMatrixf = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLNEWLIST)(GLuint, GLenum);
		PFNGLNEWLIST glNewList = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLNORMAL3B)(GLbyte, GLbyte, GLbyte);
		PFNGLNORMAL3B glNormal3b = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLNORMAL3BV)(const GLbyte *);
		PFNGLNORMAL3BV glNormal3bv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLNORMAL3D)(GLdouble, GLdouble, GLdouble);
		PFNGLNORMAL3D glNormal3d = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLNORMAL3DV)(const GLdouble *);
		PFNGLNORMAL3DV glNormal3dv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLNORMAL3F)(GLfloat, GLfloat, GLfloat);
		PFNGLNORMAL3F glNormal3f = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLNORMAL3FV)(const GLfloat *);
		PFNGLNORMAL3FV glNormal3fv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLNORMAL3I)(GLint, GLint, GLint);
		PFNGLNORMAL3I glNormal3i = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLNORMAL3IV)(const GLint *);
		PFNGLNORMAL3IV glNormal3iv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLNORMAL3S)(GLshort, GLshort, GLshort);
		PFNGLNORMAL3S glNormal3s = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLNORMAL3SV)(const GLshort *);
		PFNGLNORMAL3SV glNormal3sv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLORTHO)(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
		PFNGLORTHO glOrtho = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLPASSTHROUGH)(GLfloat);
		PFNGLPASSTHROUGH glPassThrough = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLPIXELMAPFV)(GLenum, GLsizei, const GLfloat *);
		PFNGLPIXELMAPFV glPixelMapfv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLPIXELMAPUIV)(GLenum, GLsizei, const GLuint *);
		PFNGLPIXELMAPUIV glPixelMapuiv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLPIXELMAPUSV)(GLenum, GLsizei, const GLushort *);
		PFNGLPIXELMAPUSV glPixelMapusv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLPIXELSTOREF)(GLenum, GLfloat);
		PFNGLPIXELSTOREF glPixelStoref = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLPIXELSTOREI)(GLenum, GLint);
		PFNGLPIXELSTOREI glPixelStorei = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLPIXELTRANSFERF)(GLenum, GLfloat);
		PFNGLPIXELTRANSFERF glPixelTransferf = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLPIXELTRANSFERI)(GLenum, GLint);
		PFNGLPIXELTRANSFERI glPixelTransferi = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLPIXELZOOM)(GLfloat, GLfloat);
		PFNGLPIXELZOOM glPixelZoom = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLPOINTSIZE)(GLfloat);
		PFNGLPOINTSIZE glPointSize = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLPOLYGONMODE)(GLenum, GLenum);
		PFNGLPOLYGONMODE glPolygonMode = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLPOLYGONSTIPPLE)(const GLubyte *);
		PFNGLPOLYGONSTIPPLE glPolygonStipple = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLPOPATTRIB)(void);
		PFNGLPOPATTRIB glPopAttrib = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLPOPMATRIX)(void);
		PFNGLPOPMATRIX glPopMatrix = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLPOPNAME)(void);
		PFNGLPOPNAME glPopName = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLPUSHATTRIB)(GLbitfield);
		PFNGLPUSHATTRIB glPushAttrib = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLPUSHMATRIX)(void);
		PFNGLPUSHMATRIX glPushMatrix = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLPUSHNAME)(GLuint);
		PFNGLPUSHNAME glPushName = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLRASTERPOS2D)(GLdouble, GLdouble);
		PFNGLRASTERPOS2D glRasterPos2d = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLRASTERPOS2DV)(const GLdouble *);
		PFNGLRASTERPOS2DV glRasterPos2dv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLRASTERPOS2F)(GLfloat, GLfloat);
		PFNGLRASTERPOS2F glRasterPos2f = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLRASTERPOS2FV)(const GLfloat *);
		PFNGLRASTERPOS2FV glRasterPos2fv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLRASTERPOS2I)(GLint, GLint);
		PFNGLRASTERPOS2I glRasterPos2i = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLRASTERPOS2IV)(const GLint *);
		PFNGLRASTERPOS2IV glRasterPos2iv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLRASTERPOS2S)(GLshort, GLshort);
		PFNGLRASTERPOS2S glRasterPos2s = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLRASTERPOS2SV)(const GLshort *);
		PFNGLRASTERPOS2SV glRasterPos2sv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLRASTERPOS3D)(GLdouble, GLdouble, GLdouble);
		PFNGLRASTERPOS3D glRasterPos3d = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLRASTERPOS3DV)(const GLdouble *);
		PFNGLRASTERPOS3DV glRasterPos3dv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLRASTERPOS3F)(GLfloat, GLfloat, GLfloat);
		PFNGLRASTERPOS3F glRasterPos3f = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLRASTERPOS3FV)(const GLfloat *);
		PFNGLRASTERPOS3FV glRasterPos3fv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLRASTERPOS3I)(GLint, GLint, GLint);
		PFNGLRASTERPOS3I glRasterPos3i = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLRASTERPOS3IV)(const GLint *);
		PFNGLRASTERPOS3IV glRasterPos3iv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLRASTERPOS3S)(GLshort, GLshort, GLshort);
		PFNGLRASTERPOS3S glRasterPos3s = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLRASTERPOS3SV)(const GLshort *);
		PFNGLRASTERPOS3SV glRasterPos3sv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLRASTERPOS4D)(GLdouble, GLdouble, GLdouble, GLdouble);
		PFNGLRASTERPOS4D glRasterPos4d = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLRASTERPOS4DV)(const GLdouble *);
		PFNGLRASTERPOS4DV glRasterPos4dv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLRASTERPOS4F)(GLfloat, GLfloat, GLfloat, GLfloat);
		PFNGLRASTERPOS4F glRasterPos4f = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLRASTERPOS4FV)(const GLfloat *);
		PFNGLRASTERPOS4FV glRasterPos4fv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLRASTERPOS4I)(GLint, GLint, GLint, GLint);
		PFNGLRASTERPOS4I glRasterPos4i = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLRASTERPOS4IV)(const GLint *);
		PFNGLRASTERPOS4IV glRasterPos4iv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLRASTERPOS4S)(GLshort, GLshort, GLshort, GLshort);
		PFNGLRASTERPOS4S glRasterPos4s = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLRASTERPOS4SV)(const GLshort *);
		PFNGLRASTERPOS4SV glRasterPos4sv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLREADBUFFER)(GLenum);
		PFNGLREADBUFFER glReadBuffer = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLREADPIXELS)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, void *);
		PFNGLREADPIXELS glReadPixels = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLRECTD)(GLdouble, GLdouble, GLdouble, GLdouble);
		PFNGLRECTD glRectd = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLRECTDV)(const GLdouble *, const GLdouble *);
		PFNGLRECTDV glRectdv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLRECTF)(GLfloat, GLfloat, GLfloat, GLfloat);
		PFNGLRECTF glRectf = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLRECTFV)(const GLfloat *, const GLfloat *);
		PFNGLRECTFV glRectfv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLRECTI)(GLint, GLint, GLint, GLint);
		PFNGLRECTI glRecti = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLRECTIV)(const GLint *, const GLint *);
		PFNGLRECTIV glRectiv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLRECTS)(GLshort, GLshort, GLshort, GLshort);
		PFNGLRECTS glRects = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLRECTSV)(const GLshort *, const GLshort *);
		PFNGLRECTSV glRectsv = 0;
		typedef GLint (CODEGEN_FUNCPTR *PFNGLRENDERMODE)(GLenum);
		PFNGLRENDERMODE glRenderMode = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLROTATED)(GLdouble, GLdouble, GLdouble, GLdouble);
		PFNGLROTATED glRotated = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLROTATEF)(GLfloat, GLfloat, GLfloat, GLfloat);
		PFNGLROTATEF glRotatef = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLSCALED)(GLdouble, GLdouble, GLdouble);
		PFNGLSCALED glScaled = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLSCALEF)(GLfloat, GLfloat, GLfloat);
		PFNGLSCALEF glScalef = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLSCISSOR)(GLint, GLint, GLsizei, GLsizei);
		PFNGLSCISSOR glScissor = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLSELECTBUFFER)(GLsizei, GLuint *);
		PFNGLSELECTBUFFER glSelectBuffer = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLSHADEMODEL)(GLenum);
		PFNGLSHADEMODEL glShadeModel = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLSTENCILFUNC)(GLenum, GLint, GLuint);
		PFNGLSTENCILFUNC glStencilFunc = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLSTENCILMASK)(GLuint);
		PFNGLSTENCILMASK glStencilMask = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLSTENCILOP)(GLenum, GLenum, GLenum);
		PFNGLSTENCILOP glStencilOp = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXCOORD1D)(GLdouble);
		PFNGLTEXCOORD1D glTexCoord1d = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXCOORD1DV)(const GLdouble *);
		PFNGLTEXCOORD1DV glTexCoord1dv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXCOORD1F)(GLfloat);
		PFNGLTEXCOORD1F glTexCoord1f = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXCOORD1FV)(const GLfloat *);
		PFNGLTEXCOORD1FV glTexCoord1fv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXCOORD1I)(GLint);
		PFNGLTEXCOORD1I glTexCoord1i = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXCOORD1IV)(const GLint *);
		PFNGLTEXCOORD1IV glTexCoord1iv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXCOORD1S)(GLshort);
		PFNGLTEXCOORD1S glTexCoord1s = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXCOORD1SV)(const GLshort *);
		PFNGLTEXCOORD1SV glTexCoord1sv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXCOORD2D)(GLdouble, GLdouble);
		PFNGLTEXCOORD2D glTexCoord2d = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXCOORD2DV)(const GLdouble *);
		PFNGLTEXCOORD2DV glTexCoord2dv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXCOORD2F)(GLfloat, GLfloat);
		PFNGLTEXCOORD2F glTexCoord2f = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXCOORD2FV)(const GLfloat *);
		PFNGLTEXCOORD2FV glTexCoord2fv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXCOORD2I)(GLint, GLint);
		PFNGLTEXCOORD2I glTexCoord2i = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXCOORD2IV)(const GLint *);
		PFNGLTEXCOORD2IV glTexCoord2iv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXCOORD2S)(GLshort, GLshort);
		PFNGLTEXCOORD2S glTexCoord2s = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXCOORD2SV)(const GLshort *);
		PFNGLTEXCOORD2SV glTexCoord2sv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXCOORD3D)(GLdouble, GLdouble, GLdouble);
		PFNGLTEXCOORD3D glTexCoord3d = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXCOORD3DV)(const GLdouble *);
		PFNGLTEXCOORD3DV glTexCoord3dv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXCOORD3F)(GLfloat, GLfloat, GLfloat);
		PFNGLTEXCOORD3F glTexCoord3f = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXCOORD3FV)(const GLfloat *);
		PFNGLTEXCOORD3FV glTexCoord3fv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXCOORD3I)(GLint, GLint, GLint);
		PFNGLTEXCOORD3I glTexCoord3i = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXCOORD3IV)(const GLint *);
		PFNGLTEXCOORD3IV glTexCoord3iv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXCOORD3S)(GLshort, GLshort, GLshort);
		PFNGLTEXCOORD3S glTexCoord3s = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXCOORD3SV)(const GLshort *);
		PFNGLTEXCOORD3SV glTexCoord3sv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXCOORD4D)(GLdouble, GLdouble, GLdouble, GLdouble);
		PFNGLTEXCOORD4D glTexCoord4d = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXCOORD4DV)(const GLdouble *);
		PFNGLTEXCOORD4DV glTexCoord4dv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXCOORD4F)(GLfloat, GLfloat, GLfloat, GLfloat);
		PFNGLTEXCOORD4F glTexCoord4f = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXCOORD4FV)(const GLfloat *);
		PFNGLTEXCOORD4FV glTexCoord4fv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXCOORD4I)(GLint, GLint, GLint, GLint);
		PFNGLTEXCOORD4I glTexCoord4i = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXCOORD4IV)(const GLint *);
		PFNGLTEXCOORD4IV glTexCoord4iv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXCOORD4S)(GLshort, GLshort, GLshort, GLshort);
		PFNGLTEXCOORD4S glTexCoord4s = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXCOORD4SV)(const GLshort *);
		PFNGLTEXCOORD4SV glTexCoord4sv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXENVF)(GLenum, GLenum, GLfloat);
		PFNGLTEXENVF glTexEnvf = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXENVFV)(GLenum, GLenum, const GLfloat *);
		PFNGLTEXENVFV glTexEnvfv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXENVI)(GLenum, GLenum, GLint);
		PFNGLTEXENVI glTexEnvi = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXENVIV)(GLenum, GLenum, const GLint *);
		PFNGLTEXENVIV glTexEnviv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXGEND)(GLenum, GLenum, GLdouble);
		PFNGLTEXGEND glTexGend = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXGENDV)(GLenum, GLenum, const GLdouble *);
		PFNGLTEXGENDV glTexGendv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXGENF)(GLenum, GLenum, GLfloat);
		PFNGLTEXGENF glTexGenf = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXGENFV)(GLenum, GLenum, const GLfloat *);
		PFNGLTEXGENFV glTexGenfv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXGENI)(GLenum, GLenum, GLint);
		PFNGLTEXGENI glTexGeni = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXGENIV)(GLenum, GLenum, const GLint *);
		PFNGLTEXGENIV glTexGeniv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXIMAGE1D)(GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, const void *);
		PFNGLTEXIMAGE1D glTexImage1D = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXIMAGE2D)(GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
		PFNGLTEXIMAGE2D glTexImage2D = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXPARAMETERF)(GLenum, GLenum, GLfloat);
		PFNGLTEXPARAMETERF glTexParameterf = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXPARAMETERFV)(GLenum, GLenum, const GLfloat *);
		PFNGLTEXPARAMETERFV glTexParameterfv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXPARAMETERI)(GLenum, GLenum, GLint);
		PFNGLTEXPARAMETERI glTexParameteri = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXPARAMETERIV)(GLenum, GLenum, const GLint *);
		PFNGLTEXPARAMETERIV glTexParameteriv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTRANSLATED)(GLdouble, GLdouble, GLdouble);
		PFNGLTRANSLATED glTranslated = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTRANSLATEF)(GLfloat, GLfloat, GLfloat);
		PFNGLTRANSLATEF glTranslatef = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEX2D)(GLdouble, GLdouble);
		PFNGLVERTEX2D glVertex2d = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEX2DV)(const GLdouble *);
		PFNGLVERTEX2DV glVertex2dv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEX2F)(GLfloat, GLfloat);
		PFNGLVERTEX2F glVertex2f = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEX2FV)(const GLfloat *);
		PFNGLVERTEX2FV glVertex2fv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEX2I)(GLint, GLint);
		PFNGLVERTEX2I glVertex2i = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEX2IV)(const GLint *);
		PFNGLVERTEX2IV glVertex2iv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEX2S)(GLshort, GLshort);
		PFNGLVERTEX2S glVertex2s = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEX2SV)(const GLshort *);
		PFNGLVERTEX2SV glVertex2sv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEX3D)(GLdouble, GLdouble, GLdouble);
		PFNGLVERTEX3D glVertex3d = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEX3DV)(const GLdouble *);
		PFNGLVERTEX3DV glVertex3dv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEX3F)(GLfloat, GLfloat, GLfloat);
		PFNGLVERTEX3F glVertex3f = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEX3FV)(const GLfloat *);
		PFNGLVERTEX3FV glVertex3fv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEX3I)(GLint, GLint, GLint);
		PFNGLVERTEX3I glVertex3i = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEX3IV)(const GLint *);
		PFNGLVERTEX3IV glVertex3iv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEX3S)(GLshort, GLshort, GLshort);
		PFNGLVERTEX3S glVertex3s = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEX3SV)(const GLshort *);
		PFNGLVERTEX3SV glVertex3sv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEX4D)(GLdouble, GLdouble, GLdouble, GLdouble);
		PFNGLVERTEX4D glVertex4d = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEX4DV)(const GLdouble *);
		PFNGLVERTEX4DV glVertex4dv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEX4F)(GLfloat, GLfloat, GLfloat, GLfloat);
		PFNGLVERTEX4F glVertex4f = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEX4FV)(const GLfloat *);
		PFNGLVERTEX4FV glVertex4fv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEX4I)(GLint, GLint, GLint, GLint);
		PFNGLVERTEX4I glVertex4i = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEX4IV)(const GLint *);
		PFNGLVERTEX4IV glVertex4iv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEX4S)(GLshort, GLshort, GLshort, GLshort);
		PFNGLVERTEX4S glVertex4s = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEX4SV)(const GLshort *);
		PFNGLVERTEX4SV glVertex4sv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVIEWPORT)(GLint, GLint, GLsizei, GLsizei);
		PFNGLVIEWPORT glViewport = 0;
		
		typedef GLboolean (CODEGEN_FUNCPTR *PFNGLARETEXTURESRESIDENT)(GLsizei, const GLuint *, GLboolean *);
		PFNGLARETEXTURESRESIDENT glAreTexturesResident = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLARRAYELEMENT)(GLint);
		PFNGLARRAYELEMENT glArrayElement = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLBINDTEXTURE)(GLenum, GLuint);
		PFNGLBINDTEXTURE glBindTexture = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCOLORPOINTER)(GLint, GLenum, GLsizei, const void *);
		PFNGLCOLORPOINTER glColorPointer = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCOPYTEXIMAGE1D)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
		PFNGLCOPYTEXIMAGE1D glCopyTexImage1D = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCOPYTEXIMAGE2D)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
		PFNGLCOPYTEXIMAGE2D glCopyTexImage2D = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCOPYTEXSUBIMAGE1D)(GLenum, GLint, GLint, GLint, GLint, GLsizei);
		PFNGLCOPYTEXSUBIMAGE1D glCopyTexSubImage1D = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCOPYTEXSUBIMAGE2D)(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
		PFNGLCOPYTEXSUBIMAGE2D glCopyTexSubImage2D = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLDELETETEXTURES)(GLsizei, const GLuint *);
		PFNGLDELETETEXTURES glDeleteTextures = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLDISABLECLIENTSTATE)(GLenum);
		PFNGLDISABLECLIENTSTATE glDisableClientState = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLDRAWARRAYS)(GLenum, GLint, GLsizei);
		PFNGLDRAWARRAYS glDrawArrays = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLDRAWELEMENTS)(GLenum, GLsizei, GLenum, const void *);
		PFNGLDRAWELEMENTS glDrawElements = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLEDGEFLAGPOINTER)(GLsizei, const void *);
		PFNGLEDGEFLAGPOINTER glEdgeFlagPointer = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLENABLECLIENTSTATE)(GLenum);
		PFNGLENABLECLIENTSTATE glEnableClientState = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGENTEXTURES)(GLsizei, GLuint *);
		PFNGLGENTEXTURES glGenTextures = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETPOINTERV)(GLenum, void **);
		PFNGLGETPOINTERV glGetPointerv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLINDEXPOINTER)(GLenum, GLsizei, const void *);
		PFNGLINDEXPOINTER glIndexPointer = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLINDEXUB)(GLubyte);
		PFNGLINDEXUB glIndexub = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLINDEXUBV)(const GLubyte *);
		PFNGLINDEXUBV glIndexubv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLINTERLEAVEDARRAYS)(GLenum, GLsizei, const void *);
		PFNGLINTERLEAVEDARRAYS glInterleavedArrays = 0;
		typedef GLboolean (CODEGEN_FUNCPTR *PFNGLISTEXTURE)(GLuint);
		PFNGLISTEXTURE glIsTexture = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLNORMALPOINTER)(GLenum, GLsizei, const void *);
		PFNGLNORMALPOINTER glNormalPointer = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLPOLYGONOFFSET)(GLfloat, GLfloat);
		PFNGLPOLYGONOFFSET glPolygonOffset = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLPOPCLIENTATTRIB)(void);
		PFNGLPOPCLIENTATTRIB glPopClientAttrib = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLPRIORITIZETEXTURES)(GLsizei, const GLuint *, const GLfloat *);
		PFNGLPRIORITIZETEXTURES glPrioritizeTextures = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLPUSHCLIENTATTRIB)(GLbitfield);
		PFNGLPUSHCLIENTATTRIB glPushClientAttrib = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXCOORDPOINTER)(GLint, GLenum, GLsizei, const void *);
		PFNGLTEXCOORDPOINTER glTexCoordPointer = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXSUBIMAGE1D)(GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const void *);
		PFNGLTEXSUBIMAGE1D glTexSubImage1D = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXSUBIMAGE2D)(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const void *);
		PFNGLTEXSUBIMAGE2D glTexSubImage2D = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEXPOINTER)(GLint, GLenum, GLsizei, const void *);
		PFNGLVERTEXPOINTER glVertexPointer = 0;
		
		typedef void (CODEGEN_FUNCPTR *PFNGLCOPYTEXSUBIMAGE3D)(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
		PFNGLCOPYTEXSUBIMAGE3D glCopyTexSubImage3D = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLDRAWRANGEELEMENTS)(GLenum, GLuint, GLuint, GLsizei, GLenum, const void *);
		PFNGLDRAWRANGEELEMENTS glDrawRangeElements = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXIMAGE3D)(GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
		PFNGLTEXIMAGE3D glTexImage3D = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLTEXSUBIMAGE3D)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
		PFNGLTEXSUBIMAGE3D glTexSubImage3D = 0;
		
		typedef void (CODEGEN_FUNCPTR *PFNGLACTIVETEXTURE)(GLenum);
		PFNGLACTIVETEXTURE glActiveTexture = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCLIENTACTIVETEXTURE)(GLenum);
		PFNGLCLIENTACTIVETEXTURE glClientActiveTexture = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCOMPRESSEDTEXIMAGE1D)(GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const void *);
		PFNGLCOMPRESSEDTEXIMAGE1D glCompressedTexImage1D = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCOMPRESSEDTEXIMAGE2D)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const void *);
		PFNGLCOMPRESSEDTEXIMAGE2D glCompressedTexImage2D = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCOMPRESSEDTEXIMAGE3D)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *);
		PFNGLCOMPRESSEDTEXIMAGE3D glCompressedTexImage3D = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCOMPRESSEDTEXSUBIMAGE1D)(GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const void *);
		PFNGLCOMPRESSEDTEXSUBIMAGE1D glCompressedTexSubImage1D = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCOMPRESSEDTEXSUBIMAGE2D)(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const void *);
		PFNGLCOMPRESSEDTEXSUBIMAGE2D glCompressedTexSubImage2D = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCOMPRESSEDTEXSUBIMAGE3D)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *);
		PFNGLCOMPRESSEDTEXSUBIMAGE3D glCompressedTexSubImage3D = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETCOMPRESSEDTEXIMAGE)(GLenum, GLint, void *);
		PFNGLGETCOMPRESSEDTEXIMAGE glGetCompressedTexImage = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLLOADTRANSPOSEMATRIXD)(const GLdouble *);
		PFNGLLOADTRANSPOSEMATRIXD glLoadTransposeMatrixd = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLLOADTRANSPOSEMATRIXF)(const GLfloat *);
		PFNGLLOADTRANSPOSEMATRIXF glLoadTransposeMatrixf = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLMULTTRANSPOSEMATRIXD)(const GLdouble *);
		PFNGLMULTTRANSPOSEMATRIXD glMultTransposeMatrixd = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLMULTTRANSPOSEMATRIXF)(const GLfloat *);
		PFNGLMULTTRANSPOSEMATRIXF glMultTransposeMatrixf = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLMULTITEXCOORD1D)(GLenum, GLdouble);
		PFNGLMULTITEXCOORD1D glMultiTexCoord1d = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLMULTITEXCOORD1DV)(GLenum, const GLdouble *);
		PFNGLMULTITEXCOORD1DV glMultiTexCoord1dv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLMULTITEXCOORD1F)(GLenum, GLfloat);
		PFNGLMULTITEXCOORD1F glMultiTexCoord1f = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLMULTITEXCOORD1FV)(GLenum, const GLfloat *);
		PFNGLMULTITEXCOORD1FV glMultiTexCoord1fv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLMULTITEXCOORD1I)(GLenum, GLint);
		PFNGLMULTITEXCOORD1I glMultiTexCoord1i = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLMULTITEXCOORD1IV)(GLenum, const GLint *);
		PFNGLMULTITEXCOORD1IV glMultiTexCoord1iv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLMULTITEXCOORD1S)(GLenum, GLshort);
		PFNGLMULTITEXCOORD1S glMultiTexCoord1s = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLMULTITEXCOORD1SV)(GLenum, const GLshort *);
		PFNGLMULTITEXCOORD1SV glMultiTexCoord1sv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLMULTITEXCOORD2D)(GLenum, GLdouble, GLdouble);
		PFNGLMULTITEXCOORD2D glMultiTexCoord2d = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLMULTITEXCOORD2DV)(GLenum, const GLdouble *);
		PFNGLMULTITEXCOORD2DV glMultiTexCoord2dv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLMULTITEXCOORD2F)(GLenum, GLfloat, GLfloat);
		PFNGLMULTITEXCOORD2F glMultiTexCoord2f = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLMULTITEXCOORD2FV)(GLenum, const GLfloat *);
		PFNGLMULTITEXCOORD2FV glMultiTexCoord2fv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLMULTITEXCOORD2I)(GLenum, GLint, GLint);
		PFNGLMULTITEXCOORD2I glMultiTexCoord2i = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLMULTITEXCOORD2IV)(GLenum, const GLint *);
		PFNGLMULTITEXCOORD2IV glMultiTexCoord2iv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLMULTITEXCOORD2S)(GLenum, GLshort, GLshort);
		PFNGLMULTITEXCOORD2S glMultiTexCoord2s = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLMULTITEXCOORD2SV)(GLenum, const GLshort *);
		PFNGLMULTITEXCOORD2SV glMultiTexCoord2sv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLMULTITEXCOORD3D)(GLenum, GLdouble, GLdouble, GLdouble);
		PFNGLMULTITEXCOORD3D glMultiTexCoord3d = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLMULTITEXCOORD3DV)(GLenum, const GLdouble *);
		PFNGLMULTITEXCOORD3DV glMultiTexCoord3dv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLMULTITEXCOORD3F)(GLenum, GLfloat, GLfloat, GLfloat);
		PFNGLMULTITEXCOORD3F glMultiTexCoord3f = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLMULTITEXCOORD3FV)(GLenum, const GLfloat *);
		PFNGLMULTITEXCOORD3FV glMultiTexCoord3fv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLMULTITEXCOORD3I)(GLenum, GLint, GLint, GLint);
		PFNGLMULTITEXCOORD3I glMultiTexCoord3i = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLMULTITEXCOORD3IV)(GLenum, const GLint *);
		PFNGLMULTITEXCOORD3IV glMultiTexCoord3iv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLMULTITEXCOORD3S)(GLenum, GLshort, GLshort, GLshort);
		PFNGLMULTITEXCOORD3S glMultiTexCoord3s = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLMULTITEXCOORD3SV)(GLenum, const GLshort *);
		PFNGLMULTITEXCOORD3SV glMultiTexCoord3sv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLMULTITEXCOORD4D)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
		PFNGLMULTITEXCOORD4D glMultiTexCoord4d = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLMULTITEXCOORD4DV)(GLenum, const GLdouble *);
		PFNGLMULTITEXCOORD4DV glMultiTexCoord4dv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLMULTITEXCOORD4F)(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
		PFNGLMULTITEXCOORD4F glMultiTexCoord4f = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLMULTITEXCOORD4FV)(GLenum, const GLfloat *);
		PFNGLMULTITEXCOORD4FV glMultiTexCoord4fv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLMULTITEXCOORD4I)(GLenum, GLint, GLint, GLint, GLint);
		PFNGLMULTITEXCOORD4I glMultiTexCoord4i = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLMULTITEXCOORD4IV)(GLenum, const GLint *);
		PFNGLMULTITEXCOORD4IV glMultiTexCoord4iv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLMULTITEXCOORD4S)(GLenum, GLshort, GLshort, GLshort, GLshort);
		PFNGLMULTITEXCOORD4S glMultiTexCoord4s = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLMULTITEXCOORD4SV)(GLenum, const GLshort *);
		PFNGLMULTITEXCOORD4SV glMultiTexCoord4sv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLSAMPLECOVERAGE)(GLfloat, GLboolean);
		PFNGLSAMPLECOVERAGE glSampleCoverage = 0;
		
		typedef void (CODEGEN_FUNCPTR *PFNGLBLENDCOLOR)(GLfloat, GLfloat, GLfloat, GLfloat);
		PFNGLBLENDCOLOR glBlendColor = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLBLENDEQUATION)(GLenum);
		PFNGLBLENDEQUATION glBlendEquation = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLBLENDFUNCSEPARATE)(GLenum, GLenum, GLenum, GLenum);
		PFNGLBLENDFUNCSEPARATE glBlendFuncSeparate = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLFOGCOORDPOINTER)(GLenum, GLsizei, const void *);
		PFNGLFOGCOORDPOINTER glFogCoordPointer = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLFOGCOORDD)(GLdouble);
		PFNGLFOGCOORDD glFogCoordd = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLFOGCOORDDV)(const GLdouble *);
		PFNGLFOGCOORDDV glFogCoorddv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLFOGCOORDF)(GLfloat);
		PFNGLFOGCOORDF glFogCoordf = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLFOGCOORDFV)(const GLfloat *);
		PFNGLFOGCOORDFV glFogCoordfv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLMULTIDRAWARRAYS)(GLenum, const GLint *, const GLsizei *, GLsizei);
		PFNGLMULTIDRAWARRAYS glMultiDrawArrays = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLMULTIDRAWELEMENTS)(GLenum, const GLsizei *, GLenum, const void *const*, GLsizei);
		PFNGLMULTIDRAWELEMENTS glMultiDrawElements = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLPOINTPARAMETERF)(GLenum, GLfloat);
		PFNGLPOINTPARAMETERF glPointParameterf = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLPOINTPARAMETERFV)(GLenum, const GLfloat *);
		PFNGLPOINTPARAMETERFV glPointParameterfv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLPOINTPARAMETERI)(GLenum, GLint);
		PFNGLPOINTPARAMETERI glPointParameteri = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLPOINTPARAMETERIV)(GLenum, const GLint *);
		PFNGLPOINTPARAMETERIV glPointParameteriv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLSECONDARYCOLOR3B)(GLbyte, GLbyte, GLbyte);
		PFNGLSECONDARYCOLOR3B glSecondaryColor3b = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLSECONDARYCOLOR3BV)(const GLbyte *);
		PFNGLSECONDARYCOLOR3BV glSecondaryColor3bv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLSECONDARYCOLOR3D)(GLdouble, GLdouble, GLdouble);
		PFNGLSECONDARYCOLOR3D glSecondaryColor3d = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLSECONDARYCOLOR3DV)(const GLdouble *);
		PFNGLSECONDARYCOLOR3DV glSecondaryColor3dv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLSECONDARYCOLOR3F)(GLfloat, GLfloat, GLfloat);
		PFNGLSECONDARYCOLOR3F glSecondaryColor3f = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLSECONDARYCOLOR3FV)(const GLfloat *);
		PFNGLSECONDARYCOLOR3FV glSecondaryColor3fv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLSECONDARYCOLOR3I)(GLint, GLint, GLint);
		PFNGLSECONDARYCOLOR3I glSecondaryColor3i = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLSECONDARYCOLOR3IV)(const GLint *);
		PFNGLSECONDARYCOLOR3IV glSecondaryColor3iv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLSECONDARYCOLOR3S)(GLshort, GLshort, GLshort);
		PFNGLSECONDARYCOLOR3S glSecondaryColor3s = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLSECONDARYCOLOR3SV)(const GLshort *);
		PFNGLSECONDARYCOLOR3SV glSecondaryColor3sv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLSECONDARYCOLOR3UB)(GLubyte, GLubyte, GLubyte);
		PFNGLSECONDARYCOLOR3UB glSecondaryColor3ub = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLSECONDARYCOLOR3UBV)(const GLubyte *);
		PFNGLSECONDARYCOLOR3UBV glSecondaryColor3ubv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLSECONDARYCOLOR3UI)(GLuint, GLuint, GLuint);
		PFNGLSECONDARYCOLOR3UI glSecondaryColor3ui = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLSECONDARYCOLOR3UIV)(const GLuint *);
		PFNGLSECONDARYCOLOR3UIV glSecondaryColor3uiv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLSECONDARYCOLOR3US)(GLushort, GLushort, GLushort);
		PFNGLSECONDARYCOLOR3US glSecondaryColor3us = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLSECONDARYCOLOR3USV)(const GLushort *);
		PFNGLSECONDARYCOLOR3USV glSecondaryColor3usv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLSECONDARYCOLORPOINTER)(GLint, GLenum, GLsizei, const void *);
		PFNGLSECONDARYCOLORPOINTER glSecondaryColorPointer = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLWINDOWPOS2D)(GLdouble, GLdouble);
		PFNGLWINDOWPOS2D glWindowPos2d = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLWINDOWPOS2DV)(const GLdouble *);
		PFNGLWINDOWPOS2DV glWindowPos2dv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLWINDOWPOS2F)(GLfloat, GLfloat);
		PFNGLWINDOWPOS2F glWindowPos2f = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLWINDOWPOS2FV)(const GLfloat *);
		PFNGLWINDOWPOS2FV glWindowPos2fv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLWINDOWPOS2I)(GLint, GLint);
		PFNGLWINDOWPOS2I glWindowPos2i = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLWINDOWPOS2IV)(const GLint *);
		PFNGLWINDOWPOS2IV glWindowPos2iv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLWINDOWPOS2S)(GLshort, GLshort);
		PFNGLWINDOWPOS2S glWindowPos2s = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLWINDOWPOS2SV)(const GLshort *);
		PFNGLWINDOWPOS2SV glWindowPos2sv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLWINDOWPOS3D)(GLdouble, GLdouble, GLdouble);
		PFNGLWINDOWPOS3D glWindowPos3d = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLWINDOWPOS3DV)(const GLdouble *);
		PFNGLWINDOWPOS3DV glWindowPos3dv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLWINDOWPOS3F)(GLfloat, GLfloat, GLfloat);
		PFNGLWINDOWPOS3F glWindowPos3f = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLWINDOWPOS3FV)(const GLfloat *);
		PFNGLWINDOWPOS3FV glWindowPos3fv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLWINDOWPOS3I)(GLint, GLint, GLint);
		PFNGLWINDOWPOS3I glWindowPos3i = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLWINDOWPOS3IV)(const GLint *);
		PFNGLWINDOWPOS3IV glWindowPos3iv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLWINDOWPOS3S)(GLshort, GLshort, GLshort);
		PFNGLWINDOWPOS3S glWindowPos3s = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLWINDOWPOS3SV)(const GLshort *);
		PFNGLWINDOWPOS3SV glWindowPos3sv = 0;
		
		typedef void (CODEGEN_FUNCPTR *PFNGLBEGINQUERY)(GLenum, GLuint);
		PFNGLBEGINQUERY glBeginQuery = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLBINDBUFFER)(GLenum, GLuint);
		PFNGLBINDBUFFER glBindBuffer = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLBUFFERDATA)(GLenum, GLsizeiptr, const void *, GLenum);
		PFNGLBUFFERDATA glBufferData = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLBUFFERSUBDATA)(GLenum, GLintptr, GLsizeiptr, const void *);
		PFNGLBUFFERSUBDATA glBufferSubData = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLDELETEBUFFERS)(GLsizei, const GLuint *);
		PFNGLDELETEBUFFERS glDeleteBuffers = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLDELETEQUERIES)(GLsizei, const GLuint *);
		PFNGLDELETEQUERIES glDeleteQueries = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLENDQUERY)(GLenum);
		PFNGLENDQUERY glEndQuery = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGENBUFFERS)(GLsizei, GLuint *);
		PFNGLGENBUFFERS glGenBuffers = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGENQUERIES)(GLsizei, GLuint *);
		PFNGLGENQUERIES glGenQueries = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETBUFFERPARAMETERIV)(GLenum, GLenum, GLint *);
		PFNGLGETBUFFERPARAMETERIV glGetBufferParameteriv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETBUFFERPOINTERV)(GLenum, GLenum, void **);
		PFNGLGETBUFFERPOINTERV glGetBufferPointerv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETBUFFERSUBDATA)(GLenum, GLintptr, GLsizeiptr, void *);
		PFNGLGETBUFFERSUBDATA glGetBufferSubData = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETQUERYOBJECTIV)(GLuint, GLenum, GLint *);
		PFNGLGETQUERYOBJECTIV glGetQueryObjectiv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETQUERYOBJECTUIV)(GLuint, GLenum, GLuint *);
		PFNGLGETQUERYOBJECTUIV glGetQueryObjectuiv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETQUERYIV)(GLenum, GLenum, GLint *);
		PFNGLGETQUERYIV glGetQueryiv = 0;
		typedef GLboolean (CODEGEN_FUNCPTR *PFNGLISBUFFER)(GLuint);
		PFNGLISBUFFER glIsBuffer = 0;
		typedef GLboolean (CODEGEN_FUNCPTR *PFNGLISQUERY)(GLuint);
		PFNGLISQUERY glIsQuery = 0;
		typedef void * (CODEGEN_FUNCPTR *PFNGLMAPBUFFER)(GLenum, GLenum);
		PFNGLMAPBUFFER glMapBuffer = 0;
		typedef GLboolean (CODEGEN_FUNCPTR *PFNGLUNMAPBUFFER)(GLenum);
		PFNGLUNMAPBUFFER glUnmapBuffer = 0;
		
		typedef void (CODEGEN_FUNCPTR *PFNGLATTACHSHADER)(GLuint, GLuint);
		PFNGLATTACHSHADER glAttachShader = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLBINDATTRIBLOCATION)(GLuint, GLuint, const GLchar *);
		PFNGLBINDATTRIBLOCATION glBindAttribLocation = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLBLENDEQUATIONSEPARATE)(GLenum, GLenum);
		PFNGLBLENDEQUATIONSEPARATE glBlendEquationSeparate = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLCOMPILESHADER)(GLuint);
		PFNGLCOMPILESHADER glCompileShader = 0;
		typedef GLuint (CODEGEN_FUNCPTR *PFNGLCREATEPROGRAM)(void);
		PFNGLCREATEPROGRAM glCreateProgram = 0;
		typedef GLuint (CODEGEN_FUNCPTR *PFNGLCREATESHADER)(GLenum);
		PFNGLCREATESHADER glCreateShader = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLDELETEPROGRAM)(GLuint);
		PFNGLDELETEPROGRAM glDeleteProgram = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLDELETESHADER)(GLuint);
		PFNGLDELETESHADER glDeleteShader = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLDETACHSHADER)(GLuint, GLuint);
		PFNGLDETACHSHADER glDetachShader = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLDISABLEVERTEXATTRIBARRAY)(GLuint);
		PFNGLDISABLEVERTEXATTRIBARRAY glDisableVertexAttribArray = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLDRAWBUFFERS)(GLsizei, const GLenum *);
		PFNGLDRAWBUFFERS glDrawBuffers = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLENABLEVERTEXATTRIBARRAY)(GLuint);
		PFNGLENABLEVERTEXATTRIBARRAY glEnableVertexAttribArray = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETACTIVEATTRIB)(GLuint, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLchar *);
		PFNGLGETACTIVEATTRIB glGetActiveAttrib = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETACTIVEUNIFORM)(GLuint, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLchar *);
		PFNGLGETACTIVEUNIFORM glGetActiveUniform = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETATTACHEDSHADERS)(GLuint, GLsizei, GLsizei *, GLuint *);
		PFNGLGETATTACHEDSHADERS glGetAttachedShaders = 0;
		typedef GLint (CODEGEN_FUNCPTR *PFNGLGETATTRIBLOCATION)(GLuint, const GLchar *);
		PFNGLGETATTRIBLOCATION glGetAttribLocation = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETPROGRAMINFOLOG)(GLuint, GLsizei, GLsizei *, GLchar *);
		PFNGLGETPROGRAMINFOLOG glGetProgramInfoLog = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETPROGRAMIV)(GLuint, GLenum, GLint *);
		PFNGLGETPROGRAMIV glGetProgramiv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETSHADERINFOLOG)(GLuint, GLsizei, GLsizei *, GLchar *);
		PFNGLGETSHADERINFOLOG glGetShaderInfoLog = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETSHADERSOURCE)(GLuint, GLsizei, GLsizei *, GLchar *);
		PFNGLGETSHADERSOURCE glGetShaderSource = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETSHADERIV)(GLuint, GLenum, GLint *);
		PFNGLGETSHADERIV glGetShaderiv = 0;
		typedef GLint (CODEGEN_FUNCPTR *PFNGLGETUNIFORMLOCATION)(GLuint, const GLchar *);
		PFNGLGETUNIFORMLOCATION glGetUniformLocation = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETUNIFORMFV)(GLuint, GLint, GLfloat *);
		PFNGLGETUNIFORMFV glGetUniformfv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETUNIFORMIV)(GLuint, GLint, GLint *);
		PFNGLGETUNIFORMIV glGetUniformiv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETVERTEXATTRIBPOINTERV)(GLuint, GLenum, void **);
		PFNGLGETVERTEXATTRIBPOINTERV glGetVertexAttribPointerv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETVERTEXATTRIBDV)(GLuint, GLenum, GLdouble *);
		PFNGLGETVERTEXATTRIBDV glGetVertexAttribdv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETVERTEXATTRIBFV)(GLuint, GLenum, GLfloat *);
		PFNGLGETVERTEXATTRIBFV glGetVertexAttribfv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLGETVERTEXATTRIBIV)(GLuint, GLenum, GLint *);
		PFNGLGETVERTEXATTRIBIV glGetVertexAttribiv = 0;
		typedef GLboolean (CODEGEN_FUNCPTR *PFNGLISPROGRAM)(GLuint);
		PFNGLISPROGRAM glIsProgram = 0;
		typedef GLboolean (CODEGEN_FUNCPTR *PFNGLISSHADER)(GLuint);
		PFNGLISSHADER glIsShader = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLLINKPROGRAM)(GLuint);
		PFNGLLINKPROGRAM glLinkProgram = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLSHADERSOURCE)(GLuint, GLsizei, const GLchar *const*, const GLint *);
		PFNGLSHADERSOURCE glShaderSource = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLSTENCILFUNCSEPARATE)(GLenum, GLenum, GLint, GLuint);
		PFNGLSTENCILFUNCSEPARATE glStencilFuncSeparate = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLSTENCILMASKSEPARATE)(GLenum, GLuint);
		PFNGLSTENCILMASKSEPARATE glStencilMaskSeparate = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLSTENCILOPSEPARATE)(GLenum, GLenum, GLenum, GLenum);
		PFNGLSTENCILOPSEPARATE glStencilOpSeparate = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLUNIFORM1F)(GLint, GLfloat);
		PFNGLUNIFORM1F glUniform1f = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLUNIFORM1FV)(GLint, GLsizei, const GLfloat *);
		PFNGLUNIFORM1FV glUniform1fv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLUNIFORM1I)(GLint, GLint);
		PFNGLUNIFORM1I glUniform1i = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLUNIFORM1IV)(GLint, GLsizei, const GLint *);
		PFNGLUNIFORM1IV glUniform1iv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLUNIFORM2F)(GLint, GLfloat, GLfloat);
		PFNGLUNIFORM2F glUniform2f = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLUNIFORM2FV)(GLint, GLsizei, const GLfloat *);
		PFNGLUNIFORM2FV glUniform2fv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLUNIFORM2I)(GLint, GLint, GLint);
		PFNGLUNIFORM2I glUniform2i = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLUNIFORM2IV)(GLint, GLsizei, const GLint *);
		PFNGLUNIFORM2IV glUniform2iv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLUNIFORM3F)(GLint, GLfloat, GLfloat, GLfloat);
		PFNGLUNIFORM3F glUniform3f = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLUNIFORM3FV)(GLint, GLsizei, const GLfloat *);
		PFNGLUNIFORM3FV glUniform3fv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLUNIFORM3I)(GLint, GLint, GLint, GLint);
		PFNGLUNIFORM3I glUniform3i = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLUNIFORM3IV)(GLint, GLsizei, const GLint *);
		PFNGLUNIFORM3IV glUniform3iv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLUNIFORM4F)(GLint, GLfloat, GLfloat, GLfloat, GLfloat);
		PFNGLUNIFORM4F glUniform4f = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLUNIFORM4FV)(GLint, GLsizei, const GLfloat *);
		PFNGLUNIFORM4FV glUniform4fv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLUNIFORM4I)(GLint, GLint, GLint, GLint, GLint);
		PFNGLUNIFORM4I glUniform4i = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLUNIFORM4IV)(GLint, GLsizei, const GLint *);
		PFNGLUNIFORM4IV glUniform4iv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLUNIFORMMATRIX2FV)(GLint, GLsizei, GLboolean, const GLfloat *);
		PFNGLUNIFORMMATRIX2FV glUniformMatrix2fv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLUNIFORMMATRIX3FV)(GLint, GLsizei, GLboolean, const GLfloat *);
		PFNGLUNIFORMMATRIX3FV glUniformMatrix3fv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLUNIFORMMATRIX4FV)(GLint, GLsizei, GLboolean, const GLfloat *);
		PFNGLUNIFORMMATRIX4FV glUniformMatrix4fv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLUSEPROGRAM)(GLuint);
		PFNGLUSEPROGRAM glUseProgram = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVALIDATEPROGRAM)(GLuint);
		PFNGLVALIDATEPROGRAM glValidateProgram = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEXATTRIB1D)(GLuint, GLdouble);
		PFNGLVERTEXATTRIB1D glVertexAttrib1d = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEXATTRIB1DV)(GLuint, const GLdouble *);
		PFNGLVERTEXATTRIB1DV glVertexAttrib1dv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEXATTRIB1F)(GLuint, GLfloat);
		PFNGLVERTEXATTRIB1F glVertexAttrib1f = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEXATTRIB1FV)(GLuint, const GLfloat *);
		PFNGLVERTEXATTRIB1FV glVertexAttrib1fv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEXATTRIB1S)(GLuint, GLshort);
		PFNGLVERTEXATTRIB1S glVertexAttrib1s = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEXATTRIB1SV)(GLuint, const GLshort *);
		PFNGLVERTEXATTRIB1SV glVertexAttrib1sv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEXATTRIB2D)(GLuint, GLdouble, GLdouble);
		PFNGLVERTEXATTRIB2D glVertexAttrib2d = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEXATTRIB2DV)(GLuint, const GLdouble *);
		PFNGLVERTEXATTRIB2DV glVertexAttrib2dv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEXATTRIB2F)(GLuint, GLfloat, GLfloat);
		PFNGLVERTEXATTRIB2F glVertexAttrib2f = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEXATTRIB2FV)(GLuint, const GLfloat *);
		PFNGLVERTEXATTRIB2FV glVertexAttrib2fv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEXATTRIB2S)(GLuint, GLshort, GLshort);
		PFNGLVERTEXATTRIB2S glVertexAttrib2s = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEXATTRIB2SV)(GLuint, const GLshort *);
		PFNGLVERTEXATTRIB2SV glVertexAttrib2sv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEXATTRIB3D)(GLuint, GLdouble, GLdouble, GLdouble);
		PFNGLVERTEXATTRIB3D glVertexAttrib3d = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEXATTRIB3DV)(GLuint, const GLdouble *);
		PFNGLVERTEXATTRIB3DV glVertexAttrib3dv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEXATTRIB3F)(GLuint, GLfloat, GLfloat, GLfloat);
		PFNGLVERTEXATTRIB3F glVertexAttrib3f = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEXATTRIB3FV)(GLuint, const GLfloat *);
		PFNGLVERTEXATTRIB3FV glVertexAttrib3fv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEXATTRIB3S)(GLuint, GLshort, GLshort, GLshort);
		PFNGLVERTEXATTRIB3S glVertexAttrib3s = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEXATTRIB3SV)(GLuint, const GLshort *);
		PFNGLVERTEXATTRIB3SV glVertexAttrib3sv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEXATTRIB4NBV)(GLuint, const GLbyte *);
		PFNGLVERTEXATTRIB4NBV glVertexAttrib4Nbv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEXATTRIB4NIV)(GLuint, const GLint *);
		PFNGLVERTEXATTRIB4NIV glVertexAttrib4Niv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEXATTRIB4NSV)(GLuint, const GLshort *);
		PFNGLVERTEXATTRIB4NSV glVertexAttrib4Nsv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEXATTRIB4NUB)(GLuint, GLubyte, GLubyte, GLubyte, GLubyte);
		PFNGLVERTEXATTRIB4NUB glVertexAttrib4Nub = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEXATTRIB4NUBV)(GLuint, const GLubyte *);
		PFNGLVERTEXATTRIB4NUBV glVertexAttrib4Nubv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEXATTRIB4NUIV)(GLuint, const GLuint *);
		PFNGLVERTEXATTRIB4NUIV glVertexAttrib4Nuiv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEXATTRIB4NUSV)(GLuint, const GLushort *);
		PFNGLVERTEXATTRIB4NUSV glVertexAttrib4Nusv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEXATTRIB4BV)(GLuint, const GLbyte *);
		PFNGLVERTEXATTRIB4BV glVertexAttrib4bv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEXATTRIB4D)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
		PFNGLVERTEXATTRIB4D glVertexAttrib4d = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEXATTRIB4DV)(GLuint, const GLdouble *);
		PFNGLVERTEXATTRIB4DV glVertexAttrib4dv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEXATTRIB4F)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
		PFNGLVERTEXATTRIB4F glVertexAttrib4f = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEXATTRIB4FV)(GLuint, const GLfloat *);
		PFNGLVERTEXATTRIB4FV glVertexAttrib4fv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEXATTRIB4IV)(GLuint, const GLint *);
		PFNGLVERTEXATTRIB4IV glVertexAttrib4iv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEXATTRIB4S)(GLuint, GLshort, GLshort, GLshort, GLshort);
		PFNGLVERTEXATTRIB4S glVertexAttrib4s = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEXATTRIB4SV)(GLuint, const GLshort *);
		PFNGLVERTEXATTRIB4SV glVertexAttrib4sv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEXATTRIB4UBV)(GLuint, const GLubyte *);
		PFNGLVERTEXATTRIB4UBV glVertexAttrib4ubv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEXATTRIB4UIV)(GLuint, const GLuint *);
		PFNGLVERTEXATTRIB4UIV glVertexAttrib4uiv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEXATTRIB4USV)(GLuint, const GLushort *);
		PFNGLVERTEXATTRIB4USV glVertexAttrib4usv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLVERTEXATTRIBPOINTER)(GLuint, GLint, GLenum, GLboolean, GLsizei, const void *);
		PFNGLVERTEXATTRIBPOINTER glVertexAttribPointer = 0;
		
		typedef void (CODEGEN_FUNCPTR *PFNGLUNIFORMMATRIX2X3FV)(GLint, GLsizei, GLboolean, const GLfloat *);
		PFNGLUNIFORMMATRIX2X3FV glUniformMatrix2x3fv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLUNIFORMMATRIX2X4FV)(GLint, GLsizei, GLboolean, const GLfloat *);
		PFNGLUNIFORMMATRIX2X4FV glUniformMatrix2x4fv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLUNIFORMMATRIX3X2FV)(GLint, GLsizei, GLboolean, const GLfloat *);
		PFNGLUNIFORMMATRIX3X2FV glUniformMatrix3x2fv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLUNIFORMMATRIX3X4FV)(GLint, GLsizei, GLboolean, const GLfloat *);
		PFNGLUNIFORMMATRIX3X4FV glUniformMatrix3x4fv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLUNIFORMMATRIX4X2FV)(GLint, GLsizei, GLboolean, const GLfloat *);
		PFNGLUNIFORMMATRIX4X2FV glUniformMatrix4x2fv = 0;
		typedef void (CODEGEN_FUNCPTR *PFNGLUNIFORMMATRIX4X3FV)(GLint, GLsizei, GLboolean, const GLfloat *);
		PFNGLUNIFORMMATRIX4X3FV glUniformMatrix4x3fv = 0;
		
		static int LoadCoreFunctions()
		{
			int numFailed = 0;
			glAccum = reinterpret_cast<PFNGLACCUM>(IntGetProcAddress("glAccum"));
			if(!glAccum) ++numFailed;
			glAlphaFunc = reinterpret_cast<PFNGLALPHAFUNC>(IntGetProcAddress("glAlphaFunc"));
			if(!glAlphaFunc) ++numFailed;
			glBegin = reinterpret_cast<PFNGLBEGIN>(IntGetProcAddress("glBegin"));
			if(!glBegin) ++numFailed;
			glBitmap = reinterpret_cast<PFNGLBITMAP>(IntGetProcAddress("glBitmap"));
			if(!glBitmap) ++numFailed;
			glBlendFunc = reinterpret_cast<PFNGLBLENDFUNC>(IntGetProcAddress("glBlendFunc"));
			if(!glBlendFunc) ++numFailed;
			glCallList = reinterpret_cast<PFNGLCALLLIST>(IntGetProcAddress("glCallList"));
			if(!glCallList) ++numFailed;
			glCallLists = reinterpret_cast<PFNGLCALLLISTS>(IntGetProcAddress("glCallLists"));
			if(!glCallLists) ++numFailed;
			glClear = reinterpret_cast<PFNGLCLEAR>(IntGetProcAddress("glClear"));
			if(!glClear) ++numFailed;
			glClearAccum = reinterpret_cast<PFNGLCLEARACCUM>(IntGetProcAddress("glClearAccum"));
			if(!glClearAccum) ++numFailed;
			glClearColor = reinterpret_cast<PFNGLCLEARCOLOR>(IntGetProcAddress("glClearColor"));
			if(!glClearColor) ++numFailed;
			glClearDepth = reinterpret_cast<PFNGLCLEARDEPTH>(IntGetProcAddress("glClearDepth"));
			if(!glClearDepth) ++numFailed;
			glClearIndex = reinterpret_cast<PFNGLCLEARINDEX>(IntGetProcAddress("glClearIndex"));
			if(!glClearIndex) ++numFailed;
			glClearStencil = reinterpret_cast<PFNGLCLEARSTENCIL>(IntGetProcAddress("glClearStencil"));
			if(!glClearStencil) ++numFailed;
			glClipPlane = reinterpret_cast<PFNGLCLIPPLANE>(IntGetProcAddress("glClipPlane"));
			if(!glClipPlane) ++numFailed;
			glColor3b = reinterpret_cast<PFNGLCOLOR3B>(IntGetProcAddress("glColor3b"));
			if(!glColor3b) ++numFailed;
			glColor3bv = reinterpret_cast<PFNGLCOLOR3BV>(IntGetProcAddress("glColor3bv"));
			if(!glColor3bv) ++numFailed;
			glColor3d = reinterpret_cast<PFNGLCOLOR3D>(IntGetProcAddress("glColor3d"));
			if(!glColor3d) ++numFailed;
			glColor3dv = reinterpret_cast<PFNGLCOLOR3DV>(IntGetProcAddress("glColor3dv"));
			if(!glColor3dv) ++numFailed;
			glColor3f = reinterpret_cast<PFNGLCOLOR3F>(IntGetProcAddress("glColor3f"));
			if(!glColor3f) ++numFailed;
			glColor3fv = reinterpret_cast<PFNGLCOLOR3FV>(IntGetProcAddress("glColor3fv"));
			if(!glColor3fv) ++numFailed;
			glColor3i = reinterpret_cast<PFNGLCOLOR3I>(IntGetProcAddress("glColor3i"));
			if(!glColor3i) ++numFailed;
			glColor3iv = reinterpret_cast<PFNGLCOLOR3IV>(IntGetProcAddress("glColor3iv"));
			if(!glColor3iv) ++numFailed;
			glColor3s = reinterpret_cast<PFNGLCOLOR3S>(IntGetProcAddress("glColor3s"));
			if(!glColor3s) ++numFailed;
			glColor3sv = reinterpret_cast<PFNGLCOLOR3SV>(IntGetProcAddress("glColor3sv"));
			if(!glColor3sv) ++numFailed;
			glColor3ub = reinterpret_cast<PFNGLCOLOR3UB>(IntGetProcAddress("glColor3ub"));
			if(!glColor3ub) ++numFailed;
			glColor3ubv = reinterpret_cast<PFNGLCOLOR3UBV>(IntGetProcAddress("glColor3ubv"));
			if(!glColor3ubv) ++numFailed;
			glColor3ui = reinterpret_cast<PFNGLCOLOR3UI>(IntGetProcAddress("glColor3ui"));
			if(!glColor3ui) ++numFailed;
			glColor3uiv = reinterpret_cast<PFNGLCOLOR3UIV>(IntGetProcAddress("glColor3uiv"));
			if(!glColor3uiv) ++numFailed;
			glColor3us = reinterpret_cast<PFNGLCOLOR3US>(IntGetProcAddress("glColor3us"));
			if(!glColor3us) ++numFailed;
			glColor3usv = reinterpret_cast<PFNGLCOLOR3USV>(IntGetProcAddress("glColor3usv"));
			if(!glColor3usv) ++numFailed;
			glColor4b = reinterpret_cast<PFNGLCOLOR4B>(IntGetProcAddress("glColor4b"));
			if(!glColor4b) ++numFailed;
			glColor4bv = reinterpret_cast<PFNGLCOLOR4BV>(IntGetProcAddress("glColor4bv"));
			if(!glColor4bv) ++numFailed;
			glColor4d = reinterpret_cast<PFNGLCOLOR4D>(IntGetProcAddress("glColor4d"));
			if(!glColor4d) ++numFailed;
			glColor4dv = reinterpret_cast<PFNGLCOLOR4DV>(IntGetProcAddress("glColor4dv"));
			if(!glColor4dv) ++numFailed;
			glColor4f = reinterpret_cast<PFNGLCOLOR4F>(IntGetProcAddress("glColor4f"));
			if(!glColor4f) ++numFailed;
			glColor4fv = reinterpret_cast<PFNGLCOLOR4FV>(IntGetProcAddress("glColor4fv"));
			if(!glColor4fv) ++numFailed;
			glColor4i = reinterpret_cast<PFNGLCOLOR4I>(IntGetProcAddress("glColor4i"));
			if(!glColor4i) ++numFailed;
			glColor4iv = reinterpret_cast<PFNGLCOLOR4IV>(IntGetProcAddress("glColor4iv"));
			if(!glColor4iv) ++numFailed;
			glColor4s = reinterpret_cast<PFNGLCOLOR4S>(IntGetProcAddress("glColor4s"));
			if(!glColor4s) ++numFailed;
			glColor4sv = reinterpret_cast<PFNGLCOLOR4SV>(IntGetProcAddress("glColor4sv"));
			if(!glColor4sv) ++numFailed;
			glColor4ub = reinterpret_cast<PFNGLCOLOR4UB>(IntGetProcAddress("glColor4ub"));
			if(!glColor4ub) ++numFailed;
			glColor4ubv = reinterpret_cast<PFNGLCOLOR4UBV>(IntGetProcAddress("glColor4ubv"));
			if(!glColor4ubv) ++numFailed;
			glColor4ui = reinterpret_cast<PFNGLCOLOR4UI>(IntGetProcAddress("glColor4ui"));
			if(!glColor4ui) ++numFailed;
			glColor4uiv = reinterpret_cast<PFNGLCOLOR4UIV>(IntGetProcAddress("glColor4uiv"));
			if(!glColor4uiv) ++numFailed;
			glColor4us = reinterpret_cast<PFNGLCOLOR4US>(IntGetProcAddress("glColor4us"));
			if(!glColor4us) ++numFailed;
			glColor4usv = reinterpret_cast<PFNGLCOLOR4USV>(IntGetProcAddress("glColor4usv"));
			if(!glColor4usv) ++numFailed;
			glColorMask = reinterpret_cast<PFNGLCOLORMASK>(IntGetProcAddress("glColorMask"));
			if(!glColorMask) ++numFailed;
			glColorMaterial = reinterpret_cast<PFNGLCOLORMATERIAL>(IntGetProcAddress("glColorMaterial"));
			if(!glColorMaterial) ++numFailed;
			glCopyPixels = reinterpret_cast<PFNGLCOPYPIXELS>(IntGetProcAddress("glCopyPixels"));
			if(!glCopyPixels) ++numFailed;
			glCullFace = reinterpret_cast<PFNGLCULLFACE>(IntGetProcAddress("glCullFace"));
			if(!glCullFace) ++numFailed;
			glDeleteLists = reinterpret_cast<PFNGLDELETELISTS>(IntGetProcAddress("glDeleteLists"));
			if(!glDeleteLists) ++numFailed;
			glDepthFunc = reinterpret_cast<PFNGLDEPTHFUNC>(IntGetProcAddress("glDepthFunc"));
			if(!glDepthFunc) ++numFailed;
			glDepthMask = reinterpret_cast<PFNGLDEPTHMASK>(IntGetProcAddress("glDepthMask"));
			if(!glDepthMask) ++numFailed;
			glDepthRange = reinterpret_cast<PFNGLDEPTHRANGE>(IntGetProcAddress("glDepthRange"));
			if(!glDepthRange) ++numFailed;
			glDisable = reinterpret_cast<PFNGLDISABLE>(IntGetProcAddress("glDisable"));
			if(!glDisable) ++numFailed;
			glDrawBuffer = reinterpret_cast<PFNGLDRAWBUFFER>(IntGetProcAddress("glDrawBuffer"));
			if(!glDrawBuffer) ++numFailed;
			glDrawPixels = reinterpret_cast<PFNGLDRAWPIXELS>(IntGetProcAddress("glDrawPixels"));
			if(!glDrawPixels) ++numFailed;
			glEdgeFlag = reinterpret_cast<PFNGLEDGEFLAG>(IntGetProcAddress("glEdgeFlag"));
			if(!glEdgeFlag) ++numFailed;
			glEdgeFlagv = reinterpret_cast<PFNGLEDGEFLAGV>(IntGetProcAddress("glEdgeFlagv"));
			if(!glEdgeFlagv) ++numFailed;
			glEnable = reinterpret_cast<PFNGLENABLE>(IntGetProcAddress("glEnable"));
			if(!glEnable) ++numFailed;
			glEnd = reinterpret_cast<PFNGLEND>(IntGetProcAddress("glEnd"));
			if(!glEnd) ++numFailed;
			glEndList = reinterpret_cast<PFNGLENDLIST>(IntGetProcAddress("glEndList"));
			if(!glEndList) ++numFailed;
			glEvalCoord1d = reinterpret_cast<PFNGLEVALCOORD1D>(IntGetProcAddress("glEvalCoord1d"));
			if(!glEvalCoord1d) ++numFailed;
			glEvalCoord1dv = reinterpret_cast<PFNGLEVALCOORD1DV>(IntGetProcAddress("glEvalCoord1dv"));
			if(!glEvalCoord1dv) ++numFailed;
			glEvalCoord1f = reinterpret_cast<PFNGLEVALCOORD1F>(IntGetProcAddress("glEvalCoord1f"));
			if(!glEvalCoord1f) ++numFailed;
			glEvalCoord1fv = reinterpret_cast<PFNGLEVALCOORD1FV>(IntGetProcAddress("glEvalCoord1fv"));
			if(!glEvalCoord1fv) ++numFailed;
			glEvalCoord2d = reinterpret_cast<PFNGLEVALCOORD2D>(IntGetProcAddress("glEvalCoord2d"));
			if(!glEvalCoord2d) ++numFailed;
			glEvalCoord2dv = reinterpret_cast<PFNGLEVALCOORD2DV>(IntGetProcAddress("glEvalCoord2dv"));
			if(!glEvalCoord2dv) ++numFailed;
			glEvalCoord2f = reinterpret_cast<PFNGLEVALCOORD2F>(IntGetProcAddress("glEvalCoord2f"));
			if(!glEvalCoord2f) ++numFailed;
			glEvalCoord2fv = reinterpret_cast<PFNGLEVALCOORD2FV>(IntGetProcAddress("glEvalCoord2fv"));
			if(!glEvalCoord2fv) ++numFailed;
			glEvalMesh1 = reinterpret_cast<PFNGLEVALMESH1>(IntGetProcAddress("glEvalMesh1"));
			if(!glEvalMesh1) ++numFailed;
			glEvalMesh2 = reinterpret_cast<PFNGLEVALMESH2>(IntGetProcAddress("glEvalMesh2"));
			if(!glEvalMesh2) ++numFailed;
			glEvalPoint1 = reinterpret_cast<PFNGLEVALPOINT1>(IntGetProcAddress("glEvalPoint1"));
			if(!glEvalPoint1) ++numFailed;
			glEvalPoint2 = reinterpret_cast<PFNGLEVALPOINT2>(IntGetProcAddress("glEvalPoint2"));
			if(!glEvalPoint2) ++numFailed;
			glFeedbackBuffer = reinterpret_cast<PFNGLFEEDBACKBUFFER>(IntGetProcAddress("glFeedbackBuffer"));
			if(!glFeedbackBuffer) ++numFailed;
			glFinish = reinterpret_cast<PFNGLFINISH>(IntGetProcAddress("glFinish"));
			if(!glFinish) ++numFailed;
			glFlush = reinterpret_cast<PFNGLFLUSH>(IntGetProcAddress("glFlush"));
			if(!glFlush) ++numFailed;
			glFogf = reinterpret_cast<PFNGLFOGF>(IntGetProcAddress("glFogf"));
			if(!glFogf) ++numFailed;
			glFogfv = reinterpret_cast<PFNGLFOGFV>(IntGetProcAddress("glFogfv"));
			if(!glFogfv) ++numFailed;
			glFogi = reinterpret_cast<PFNGLFOGI>(IntGetProcAddress("glFogi"));
			if(!glFogi) ++numFailed;
			glFogiv = reinterpret_cast<PFNGLFOGIV>(IntGetProcAddress("glFogiv"));
			if(!glFogiv) ++numFailed;
			glFrontFace = reinterpret_cast<PFNGLFRONTFACE>(IntGetProcAddress("glFrontFace"));
			if(!glFrontFace) ++numFailed;
			glFrustum = reinterpret_cast<PFNGLFRUSTUM>(IntGetProcAddress("glFrustum"));
			if(!glFrustum) ++numFailed;
			glGenLists = reinterpret_cast<PFNGLGENLISTS>(IntGetProcAddress("glGenLists"));
			if(!glGenLists) ++numFailed;
			glGetBooleanv = reinterpret_cast<PFNGLGETBOOLEANV>(IntGetProcAddress("glGetBooleanv"));
			if(!glGetBooleanv) ++numFailed;
			glGetClipPlane = reinterpret_cast<PFNGLGETCLIPPLANE>(IntGetProcAddress("glGetClipPlane"));
			if(!glGetClipPlane) ++numFailed;
			glGetDoublev = reinterpret_cast<PFNGLGETDOUBLEV>(IntGetProcAddress("glGetDoublev"));
			if(!glGetDoublev) ++numFailed;
			glGetError = reinterpret_cast<PFNGLGETERROR>(IntGetProcAddress("glGetError"));
			if(!glGetError) ++numFailed;
			glGetFloatv = reinterpret_cast<PFNGLGETFLOATV>(IntGetProcAddress("glGetFloatv"));
			if(!glGetFloatv) ++numFailed;
			glGetIntegerv = reinterpret_cast<PFNGLGETINTEGERV>(IntGetProcAddress("glGetIntegerv"));
			if(!glGetIntegerv) ++numFailed;
			glGetLightfv = reinterpret_cast<PFNGLGETLIGHTFV>(IntGetProcAddress("glGetLightfv"));
			if(!glGetLightfv) ++numFailed;
			glGetLightiv = reinterpret_cast<PFNGLGETLIGHTIV>(IntGetProcAddress("glGetLightiv"));
			if(!glGetLightiv) ++numFailed;
			glGetMapdv = reinterpret_cast<PFNGLGETMAPDV>(IntGetProcAddress("glGetMapdv"));
			if(!glGetMapdv) ++numFailed;
			glGetMapfv = reinterpret_cast<PFNGLGETMAPFV>(IntGetProcAddress("glGetMapfv"));
			if(!glGetMapfv) ++numFailed;
			glGetMapiv = reinterpret_cast<PFNGLGETMAPIV>(IntGetProcAddress("glGetMapiv"));
			if(!glGetMapiv) ++numFailed;
			glGetMaterialfv = reinterpret_cast<PFNGLGETMATERIALFV>(IntGetProcAddress("glGetMaterialfv"));
			if(!glGetMaterialfv) ++numFailed;
			glGetMaterialiv = reinterpret_cast<PFNGLGETMATERIALIV>(IntGetProcAddress("glGetMaterialiv"));
			if(!glGetMaterialiv) ++numFailed;
			glGetPixelMapfv = reinterpret_cast<PFNGLGETPIXELMAPFV>(IntGetProcAddress("glGetPixelMapfv"));
			if(!glGetPixelMapfv) ++numFailed;
			glGetPixelMapuiv = reinterpret_cast<PFNGLGETPIXELMAPUIV>(IntGetProcAddress("glGetPixelMapuiv"));
			if(!glGetPixelMapuiv) ++numFailed;
			glGetPixelMapusv = reinterpret_cast<PFNGLGETPIXELMAPUSV>(IntGetProcAddress("glGetPixelMapusv"));
			if(!glGetPixelMapusv) ++numFailed;
			glGetPolygonStipple = reinterpret_cast<PFNGLGETPOLYGONSTIPPLE>(IntGetProcAddress("glGetPolygonStipple"));
			if(!glGetPolygonStipple) ++numFailed;
			glGetString = reinterpret_cast<PFNGLGETSTRING>(IntGetProcAddress("glGetString"));
			if(!glGetString) ++numFailed;
			glGetTexEnvfv = reinterpret_cast<PFNGLGETTEXENVFV>(IntGetProcAddress("glGetTexEnvfv"));
			if(!glGetTexEnvfv) ++numFailed;
			glGetTexEnviv = reinterpret_cast<PFNGLGETTEXENVIV>(IntGetProcAddress("glGetTexEnviv"));
			if(!glGetTexEnviv) ++numFailed;
			glGetTexGendv = reinterpret_cast<PFNGLGETTEXGENDV>(IntGetProcAddress("glGetTexGendv"));
			if(!glGetTexGendv) ++numFailed;
			glGetTexGenfv = reinterpret_cast<PFNGLGETTEXGENFV>(IntGetProcAddress("glGetTexGenfv"));
			if(!glGetTexGenfv) ++numFailed;
			glGetTexGeniv = reinterpret_cast<PFNGLGETTEXGENIV>(IntGetProcAddress("glGetTexGeniv"));
			if(!glGetTexGeniv) ++numFailed;
			glGetTexImage = reinterpret_cast<PFNGLGETTEXIMAGE>(IntGetProcAddress("glGetTexImage"));
			if(!glGetTexImage) ++numFailed;
			glGetTexLevelParameterfv = reinterpret_cast<PFNGLGETTEXLEVELPARAMETERFV>(IntGetProcAddress("glGetTexLevelParameterfv"));
			if(!glGetTexLevelParameterfv) ++numFailed;
			glGetTexLevelParameteriv = reinterpret_cast<PFNGLGETTEXLEVELPARAMETERIV>(IntGetProcAddress("glGetTexLevelParameteriv"));
			if(!glGetTexLevelParameteriv) ++numFailed;
			glGetTexParameterfv = reinterpret_cast<PFNGLGETTEXPARAMETERFV>(IntGetProcAddress("glGetTexParameterfv"));
			if(!glGetTexParameterfv) ++numFailed;
			glGetTexParameteriv = reinterpret_cast<PFNGLGETTEXPARAMETERIV>(IntGetProcAddress("glGetTexParameteriv"));
			if(!glGetTexParameteriv) ++numFailed;
			glHint = reinterpret_cast<PFNGLHINT>(IntGetProcAddress("glHint"));
			if(!glHint) ++numFailed;
			glIndexMask = reinterpret_cast<PFNGLINDEXMASK>(IntGetProcAddress("glIndexMask"));
			if(!glIndexMask) ++numFailed;
			glIndexd = reinterpret_cast<PFNGLINDEXD>(IntGetProcAddress("glIndexd"));
			if(!glIndexd) ++numFailed;
			glIndexdv = reinterpret_cast<PFNGLINDEXDV>(IntGetProcAddress("glIndexdv"));
			if(!glIndexdv) ++numFailed;
			glIndexf = reinterpret_cast<PFNGLINDEXF>(IntGetProcAddress("glIndexf"));
			if(!glIndexf) ++numFailed;
			glIndexfv = reinterpret_cast<PFNGLINDEXFV>(IntGetProcAddress("glIndexfv"));
			if(!glIndexfv) ++numFailed;
			glIndexi = reinterpret_cast<PFNGLINDEXI>(IntGetProcAddress("glIndexi"));
			if(!glIndexi) ++numFailed;
			glIndexiv = reinterpret_cast<PFNGLINDEXIV>(IntGetProcAddress("glIndexiv"));
			if(!glIndexiv) ++numFailed;
			glIndexs = reinterpret_cast<PFNGLINDEXS>(IntGetProcAddress("glIndexs"));
			if(!glIndexs) ++numFailed;
			glIndexsv = reinterpret_cast<PFNGLINDEXSV>(IntGetProcAddress("glIndexsv"));
			if(!glIndexsv) ++numFailed;
			glInitNames = reinterpret_cast<PFNGLINITNAMES>(IntGetProcAddress("glInitNames"));
			if(!glInitNames) ++numFailed;
			glIsEnabled = reinterpret_cast<PFNGLISENABLED>(IntGetProcAddress("glIsEnabled"));
			if(!glIsEnabled) ++numFailed;
			glIsList = reinterpret_cast<PFNGLISLIST>(IntGetProcAddress("glIsList"));
			if(!glIsList) ++numFailed;
			glLightModelf = reinterpret_cast<PFNGLLIGHTMODELF>(IntGetProcAddress("glLightModelf"));
			if(!glLightModelf) ++numFailed;
			glLightModelfv = reinterpret_cast<PFNGLLIGHTMODELFV>(IntGetProcAddress("glLightModelfv"));
			if(!glLightModelfv) ++numFailed;
			glLightModeli = reinterpret_cast<PFNGLLIGHTMODELI>(IntGetProcAddress("glLightModeli"));
			if(!glLightModeli) ++numFailed;
			glLightModeliv = reinterpret_cast<PFNGLLIGHTMODELIV>(IntGetProcAddress("glLightModeliv"));
			if(!glLightModeliv) ++numFailed;
			glLightf = reinterpret_cast<PFNGLLIGHTF>(IntGetProcAddress("glLightf"));
			if(!glLightf) ++numFailed;
			glLightfv = reinterpret_cast<PFNGLLIGHTFV>(IntGetProcAddress("glLightfv"));
			if(!glLightfv) ++numFailed;
			glLighti = reinterpret_cast<PFNGLLIGHTI>(IntGetProcAddress("glLighti"));
			if(!glLighti) ++numFailed;
			glLightiv = reinterpret_cast<PFNGLLIGHTIV>(IntGetProcAddress("glLightiv"));
			if(!glLightiv) ++numFailed;
			glLineStipple = reinterpret_cast<PFNGLLINESTIPPLE>(IntGetProcAddress("glLineStipple"));
			if(!glLineStipple) ++numFailed;
			glLineWidth = reinterpret_cast<PFNGLLINEWIDTH>(IntGetProcAddress("glLineWidth"));
			if(!glLineWidth) ++numFailed;
			glListBase = reinterpret_cast<PFNGLLISTBASE>(IntGetProcAddress("glListBase"));
			if(!glListBase) ++numFailed;
			glLoadIdentity = reinterpret_cast<PFNGLLOADIDENTITY>(IntGetProcAddress("glLoadIdentity"));
			if(!glLoadIdentity) ++numFailed;
			glLoadMatrixd = reinterpret_cast<PFNGLLOADMATRIXD>(IntGetProcAddress("glLoadMatrixd"));
			if(!glLoadMatrixd) ++numFailed;
			glLoadMatrixf = reinterpret_cast<PFNGLLOADMATRIXF>(IntGetProcAddress("glLoadMatrixf"));
			if(!glLoadMatrixf) ++numFailed;
			glLoadName = reinterpret_cast<PFNGLLOADNAME>(IntGetProcAddress("glLoadName"));
			if(!glLoadName) ++numFailed;
			glLogicOp = reinterpret_cast<PFNGLLOGICOP>(IntGetProcAddress("glLogicOp"));
			if(!glLogicOp) ++numFailed;
			glMap1d = reinterpret_cast<PFNGLMAP1D>(IntGetProcAddress("glMap1d"));
			if(!glMap1d) ++numFailed;
			glMap1f = reinterpret_cast<PFNGLMAP1F>(IntGetProcAddress("glMap1f"));
			if(!glMap1f) ++numFailed;
			glMap2d = reinterpret_cast<PFNGLMAP2D>(IntGetProcAddress("glMap2d"));
			if(!glMap2d) ++numFailed;
			glMap2f = reinterpret_cast<PFNGLMAP2F>(IntGetProcAddress("glMap2f"));
			if(!glMap2f) ++numFailed;
			glMapGrid1d = reinterpret_cast<PFNGLMAPGRID1D>(IntGetProcAddress("glMapGrid1d"));
			if(!glMapGrid1d) ++numFailed;
			glMapGrid1f = reinterpret_cast<PFNGLMAPGRID1F>(IntGetProcAddress("glMapGrid1f"));
			if(!glMapGrid1f) ++numFailed;
			glMapGrid2d = reinterpret_cast<PFNGLMAPGRID2D>(IntGetProcAddress("glMapGrid2d"));
			if(!glMapGrid2d) ++numFailed;
			glMapGrid2f = reinterpret_cast<PFNGLMAPGRID2F>(IntGetProcAddress("glMapGrid2f"));
			if(!glMapGrid2f) ++numFailed;
			glMaterialf = reinterpret_cast<PFNGLMATERIALF>(IntGetProcAddress("glMaterialf"));
			if(!glMaterialf) ++numFailed;
			glMaterialfv = reinterpret_cast<PFNGLMATERIALFV>(IntGetProcAddress("glMaterialfv"));
			if(!glMaterialfv) ++numFailed;
			glMateriali = reinterpret_cast<PFNGLMATERIALI>(IntGetProcAddress("glMateriali"));
			if(!glMateriali) ++numFailed;
			glMaterialiv = reinterpret_cast<PFNGLMATERIALIV>(IntGetProcAddress("glMaterialiv"));
			if(!glMaterialiv) ++numFailed;
			glMatrixMode = reinterpret_cast<PFNGLMATRIXMODE>(IntGetProcAddress("glMatrixMode"));
			if(!glMatrixMode) ++numFailed;
			glMultMatrixd = reinterpret_cast<PFNGLMULTMATRIXD>(IntGetProcAddress("glMultMatrixd"));
			if(!glMultMatrixd) ++numFailed;
			glMultMatrixf = reinterpret_cast<PFNGLMULTMATRIXF>(IntGetProcAddress("glMultMatrixf"));
			if(!glMultMatrixf) ++numFailed;
			glNewList = reinterpret_cast<PFNGLNEWLIST>(IntGetProcAddress("glNewList"));
			if(!glNewList) ++numFailed;
			glNormal3b = reinterpret_cast<PFNGLNORMAL3B>(IntGetProcAddress("glNormal3b"));
			if(!glNormal3b) ++numFailed;
			glNormal3bv = reinterpret_cast<PFNGLNORMAL3BV>(IntGetProcAddress("glNormal3bv"));
			if(!glNormal3bv) ++numFailed;
			glNormal3d = reinterpret_cast<PFNGLNORMAL3D>(IntGetProcAddress("glNormal3d"));
			if(!glNormal3d) ++numFailed;
			glNormal3dv = reinterpret_cast<PFNGLNORMAL3DV>(IntGetProcAddress("glNormal3dv"));
			if(!glNormal3dv) ++numFailed;
			glNormal3f = reinterpret_cast<PFNGLNORMAL3F>(IntGetProcAddress("glNormal3f"));
			if(!glNormal3f) ++numFailed;
			glNormal3fv = reinterpret_cast<PFNGLNORMAL3FV>(IntGetProcAddress("glNormal3fv"));
			if(!glNormal3fv) ++numFailed;
			glNormal3i = reinterpret_cast<PFNGLNORMAL3I>(IntGetProcAddress("glNormal3i"));
			if(!glNormal3i) ++numFailed;
			glNormal3iv = reinterpret_cast<PFNGLNORMAL3IV>(IntGetProcAddress("glNormal3iv"));
			if(!glNormal3iv) ++numFailed;
			glNormal3s = reinterpret_cast<PFNGLNORMAL3S>(IntGetProcAddress("glNormal3s"));
			if(!glNormal3s) ++numFailed;
			glNormal3sv = reinterpret_cast<PFNGLNORMAL3SV>(IntGetProcAddress("glNormal3sv"));
			if(!glNormal3sv) ++numFailed;
			glOrtho = reinterpret_cast<PFNGLORTHO>(IntGetProcAddress("glOrtho"));
			if(!glOrtho) ++numFailed;
			glPassThrough = reinterpret_cast<PFNGLPASSTHROUGH>(IntGetProcAddress("glPassThrough"));
			if(!glPassThrough) ++numFailed;
			glPixelMapfv = reinterpret_cast<PFNGLPIXELMAPFV>(IntGetProcAddress("glPixelMapfv"));
			if(!glPixelMapfv) ++numFailed;
			glPixelMapuiv = reinterpret_cast<PFNGLPIXELMAPUIV>(IntGetProcAddress("glPixelMapuiv"));
			if(!glPixelMapuiv) ++numFailed;
			glPixelMapusv = reinterpret_cast<PFNGLPIXELMAPUSV>(IntGetProcAddress("glPixelMapusv"));
			if(!glPixelMapusv) ++numFailed;
			glPixelStoref = reinterpret_cast<PFNGLPIXELSTOREF>(IntGetProcAddress("glPixelStoref"));
			if(!glPixelStoref) ++numFailed;
			glPixelStorei = reinterpret_cast<PFNGLPIXELSTOREI>(IntGetProcAddress("glPixelStorei"));
			if(!glPixelStorei) ++numFailed;
			glPixelTransferf = reinterpret_cast<PFNGLPIXELTRANSFERF>(IntGetProcAddress("glPixelTransferf"));
			if(!glPixelTransferf) ++numFailed;
			glPixelTransferi = reinterpret_cast<PFNGLPIXELTRANSFERI>(IntGetProcAddress("glPixelTransferi"));
			if(!glPixelTransferi) ++numFailed;
			glPixelZoom = reinterpret_cast<PFNGLPIXELZOOM>(IntGetProcAddress("glPixelZoom"));
			if(!glPixelZoom) ++numFailed;
			glPointSize = reinterpret_cast<PFNGLPOINTSIZE>(IntGetProcAddress("glPointSize"));
			if(!glPointSize) ++numFailed;
			glPolygonMode = reinterpret_cast<PFNGLPOLYGONMODE>(IntGetProcAddress("glPolygonMode"));
			if(!glPolygonMode) ++numFailed;
			glPolygonStipple = reinterpret_cast<PFNGLPOLYGONSTIPPLE>(IntGetProcAddress("glPolygonStipple"));
			if(!glPolygonStipple) ++numFailed;
			glPopAttrib = reinterpret_cast<PFNGLPOPATTRIB>(IntGetProcAddress("glPopAttrib"));
			if(!glPopAttrib) ++numFailed;
			glPopMatrix = reinterpret_cast<PFNGLPOPMATRIX>(IntGetProcAddress("glPopMatrix"));
			if(!glPopMatrix) ++numFailed;
			glPopName = reinterpret_cast<PFNGLPOPNAME>(IntGetProcAddress("glPopName"));
			if(!glPopName) ++numFailed;
			glPushAttrib = reinterpret_cast<PFNGLPUSHATTRIB>(IntGetProcAddress("glPushAttrib"));
			if(!glPushAttrib) ++numFailed;
			glPushMatrix = reinterpret_cast<PFNGLPUSHMATRIX>(IntGetProcAddress("glPushMatrix"));
			if(!glPushMatrix) ++numFailed;
			glPushName = reinterpret_cast<PFNGLPUSHNAME>(IntGetProcAddress("glPushName"));
			if(!glPushName) ++numFailed;
			glRasterPos2d = reinterpret_cast<PFNGLRASTERPOS2D>(IntGetProcAddress("glRasterPos2d"));
			if(!glRasterPos2d) ++numFailed;
			glRasterPos2dv = reinterpret_cast<PFNGLRASTERPOS2DV>(IntGetProcAddress("glRasterPos2dv"));
			if(!glRasterPos2dv) ++numFailed;
			glRasterPos2f = reinterpret_cast<PFNGLRASTERPOS2F>(IntGetProcAddress("glRasterPos2f"));
			if(!glRasterPos2f) ++numFailed;
			glRasterPos2fv = reinterpret_cast<PFNGLRASTERPOS2FV>(IntGetProcAddress("glRasterPos2fv"));
			if(!glRasterPos2fv) ++numFailed;
			glRasterPos2i = reinterpret_cast<PFNGLRASTERPOS2I>(IntGetProcAddress("glRasterPos2i"));
			if(!glRasterPos2i) ++numFailed;
			glRasterPos2iv = reinterpret_cast<PFNGLRASTERPOS2IV>(IntGetProcAddress("glRasterPos2iv"));
			if(!glRasterPos2iv) ++numFailed;
			glRasterPos2s = reinterpret_cast<PFNGLRASTERPOS2S>(IntGetProcAddress("glRasterPos2s"));
			if(!glRasterPos2s) ++numFailed;
			glRasterPos2sv = reinterpret_cast<PFNGLRASTERPOS2SV>(IntGetProcAddress("glRasterPos2sv"));
			if(!glRasterPos2sv) ++numFailed;
			glRasterPos3d = reinterpret_cast<PFNGLRASTERPOS3D>(IntGetProcAddress("glRasterPos3d"));
			if(!glRasterPos3d) ++numFailed;
			glRasterPos3dv = reinterpret_cast<PFNGLRASTERPOS3DV>(IntGetProcAddress("glRasterPos3dv"));
			if(!glRasterPos3dv) ++numFailed;
			glRasterPos3f = reinterpret_cast<PFNGLRASTERPOS3F>(IntGetProcAddress("glRasterPos3f"));
			if(!glRasterPos3f) ++numFailed;
			glRasterPos3fv = reinterpret_cast<PFNGLRASTERPOS3FV>(IntGetProcAddress("glRasterPos3fv"));
			if(!glRasterPos3fv) ++numFailed;
			glRasterPos3i = reinterpret_cast<PFNGLRASTERPOS3I>(IntGetProcAddress("glRasterPos3i"));
			if(!glRasterPos3i) ++numFailed;
			glRasterPos3iv = reinterpret_cast<PFNGLRASTERPOS3IV>(IntGetProcAddress("glRasterPos3iv"));
			if(!glRasterPos3iv) ++numFailed;
			glRasterPos3s = reinterpret_cast<PFNGLRASTERPOS3S>(IntGetProcAddress("glRasterPos3s"));
			if(!glRasterPos3s) ++numFailed;
			glRasterPos3sv = reinterpret_cast<PFNGLRASTERPOS3SV>(IntGetProcAddress("glRasterPos3sv"));
			if(!glRasterPos3sv) ++numFailed;
			glRasterPos4d = reinterpret_cast<PFNGLRASTERPOS4D>(IntGetProcAddress("glRasterPos4d"));
			if(!glRasterPos4d) ++numFailed;
			glRasterPos4dv = reinterpret_cast<PFNGLRASTERPOS4DV>(IntGetProcAddress("glRasterPos4dv"));
			if(!glRasterPos4dv) ++numFailed;
			glRasterPos4f = reinterpret_cast<PFNGLRASTERPOS4F>(IntGetProcAddress("glRasterPos4f"));
			if(!glRasterPos4f) ++numFailed;
			glRasterPos4fv = reinterpret_cast<PFNGLRASTERPOS4FV>(IntGetProcAddress("glRasterPos4fv"));
			if(!glRasterPos4fv) ++numFailed;
			glRasterPos4i = reinterpret_cast<PFNGLRASTERPOS4I>(IntGetProcAddress("glRasterPos4i"));
			if(!glRasterPos4i) ++numFailed;
			glRasterPos4iv = reinterpret_cast<PFNGLRASTERPOS4IV>(IntGetProcAddress("glRasterPos4iv"));
			if(!glRasterPos4iv) ++numFailed;
			glRasterPos4s = reinterpret_cast<PFNGLRASTERPOS4S>(IntGetProcAddress("glRasterPos4s"));
			if(!glRasterPos4s) ++numFailed;
			glRasterPos4sv = reinterpret_cast<PFNGLRASTERPOS4SV>(IntGetProcAddress("glRasterPos4sv"));
			if(!glRasterPos4sv) ++numFailed;
			glReadBuffer = reinterpret_cast<PFNGLREADBUFFER>(IntGetProcAddress("glReadBuffer"));
			if(!glReadBuffer) ++numFailed;
			glReadPixels = reinterpret_cast<PFNGLREADPIXELS>(IntGetProcAddress("glReadPixels"));
			if(!glReadPixels) ++numFailed;
			glRectd = reinterpret_cast<PFNGLRECTD>(IntGetProcAddress("glRectd"));
			if(!glRectd) ++numFailed;
			glRectdv = reinterpret_cast<PFNGLRECTDV>(IntGetProcAddress("glRectdv"));
			if(!glRectdv) ++numFailed;
			glRectf = reinterpret_cast<PFNGLRECTF>(IntGetProcAddress("glRectf"));
			if(!glRectf) ++numFailed;
			glRectfv = reinterpret_cast<PFNGLRECTFV>(IntGetProcAddress("glRectfv"));
			if(!glRectfv) ++numFailed;
			glRecti = reinterpret_cast<PFNGLRECTI>(IntGetProcAddress("glRecti"));
			if(!glRecti) ++numFailed;
			glRectiv = reinterpret_cast<PFNGLRECTIV>(IntGetProcAddress("glRectiv"));
			if(!glRectiv) ++numFailed;
			glRects = reinterpret_cast<PFNGLRECTS>(IntGetProcAddress("glRects"));
			if(!glRects) ++numFailed;
			glRectsv = reinterpret_cast<PFNGLRECTSV>(IntGetProcAddress("glRectsv"));
			if(!glRectsv) ++numFailed;
			glRenderMode = reinterpret_cast<PFNGLRENDERMODE>(IntGetProcAddress("glRenderMode"));
			if(!glRenderMode) ++numFailed;
			glRotated = reinterpret_cast<PFNGLROTATED>(IntGetProcAddress("glRotated"));
			if(!glRotated) ++numFailed;
			glRotatef = reinterpret_cast<PFNGLROTATEF>(IntGetProcAddress("glRotatef"));
			if(!glRotatef) ++numFailed;
			glScaled = reinterpret_cast<PFNGLSCALED>(IntGetProcAddress("glScaled"));
			if(!glScaled) ++numFailed;
			glScalef = reinterpret_cast<PFNGLSCALEF>(IntGetProcAddress("glScalef"));
			if(!glScalef) ++numFailed;
			glScissor = reinterpret_cast<PFNGLSCISSOR>(IntGetProcAddress("glScissor"));
			if(!glScissor) ++numFailed;
			glSelectBuffer = reinterpret_cast<PFNGLSELECTBUFFER>(IntGetProcAddress("glSelectBuffer"));
			if(!glSelectBuffer) ++numFailed;
			glShadeModel = reinterpret_cast<PFNGLSHADEMODEL>(IntGetProcAddress("glShadeModel"));
			if(!glShadeModel) ++numFailed;
			glStencilFunc = reinterpret_cast<PFNGLSTENCILFUNC>(IntGetProcAddress("glStencilFunc"));
			if(!glStencilFunc) ++numFailed;
			glStencilMask = reinterpret_cast<PFNGLSTENCILMASK>(IntGetProcAddress("glStencilMask"));
			if(!glStencilMask) ++numFailed;
			glStencilOp = reinterpret_cast<PFNGLSTENCILOP>(IntGetProcAddress("glStencilOp"));
			if(!glStencilOp) ++numFailed;
			glTexCoord1d = reinterpret_cast<PFNGLTEXCOORD1D>(IntGetProcAddress("glTexCoord1d"));
			if(!glTexCoord1d) ++numFailed;
			glTexCoord1dv = reinterpret_cast<PFNGLTEXCOORD1DV>(IntGetProcAddress("glTexCoord1dv"));
			if(!glTexCoord1dv) ++numFailed;
			glTexCoord1f = reinterpret_cast<PFNGLTEXCOORD1F>(IntGetProcAddress("glTexCoord1f"));
			if(!glTexCoord1f) ++numFailed;
			glTexCoord1fv = reinterpret_cast<PFNGLTEXCOORD1FV>(IntGetProcAddress("glTexCoord1fv"));
			if(!glTexCoord1fv) ++numFailed;
			glTexCoord1i = reinterpret_cast<PFNGLTEXCOORD1I>(IntGetProcAddress("glTexCoord1i"));
			if(!glTexCoord1i) ++numFailed;
			glTexCoord1iv = reinterpret_cast<PFNGLTEXCOORD1IV>(IntGetProcAddress("glTexCoord1iv"));
			if(!glTexCoord1iv) ++numFailed;
			glTexCoord1s = reinterpret_cast<PFNGLTEXCOORD1S>(IntGetProcAddress("glTexCoord1s"));
			if(!glTexCoord1s) ++numFailed;
			glTexCoord1sv = reinterpret_cast<PFNGLTEXCOORD1SV>(IntGetProcAddress("glTexCoord1sv"));
			if(!glTexCoord1sv) ++numFailed;
			glTexCoord2d = reinterpret_cast<PFNGLTEXCOORD2D>(IntGetProcAddress("glTexCoord2d"));
			if(!glTexCoord2d) ++numFailed;
			glTexCoord2dv = reinterpret_cast<PFNGLTEXCOORD2DV>(IntGetProcAddress("glTexCoord2dv"));
			if(!glTexCoord2dv) ++numFailed;
			glTexCoord2f = reinterpret_cast<PFNGLTEXCOORD2F>(IntGetProcAddress("glTexCoord2f"));
			if(!glTexCoord2f) ++numFailed;
			glTexCoord2fv = reinterpret_cast<PFNGLTEXCOORD2FV>(IntGetProcAddress("glTexCoord2fv"));
			if(!glTexCoord2fv) ++numFailed;
			glTexCoord2i = reinterpret_cast<PFNGLTEXCOORD2I>(IntGetProcAddress("glTexCoord2i"));
			if(!glTexCoord2i) ++numFailed;
			glTexCoord2iv = reinterpret_cast<PFNGLTEXCOORD2IV>(IntGetProcAddress("glTexCoord2iv"));
			if(!glTexCoord2iv) ++numFailed;
			glTexCoord2s = reinterpret_cast<PFNGLTEXCOORD2S>(IntGetProcAddress("glTexCoord2s"));
			if(!glTexCoord2s) ++numFailed;
			glTexCoord2sv = reinterpret_cast<PFNGLTEXCOORD2SV>(IntGetProcAddress("glTexCoord2sv"));
			if(!glTexCoord2sv) ++numFailed;
			glTexCoord3d = reinterpret_cast<PFNGLTEXCOORD3D>(IntGetProcAddress("glTexCoord3d"));
			if(!glTexCoord3d) ++numFailed;
			glTexCoord3dv = reinterpret_cast<PFNGLTEXCOORD3DV>(IntGetProcAddress("glTexCoord3dv"));
			if(!glTexCoord3dv) ++numFailed;
			glTexCoord3f = reinterpret_cast<PFNGLTEXCOORD3F>(IntGetProcAddress("glTexCoord3f"));
			if(!glTexCoord3f) ++numFailed;
			glTexCoord3fv = reinterpret_cast<PFNGLTEXCOORD3FV>(IntGetProcAddress("glTexCoord3fv"));
			if(!glTexCoord3fv) ++numFailed;
			glTexCoord3i = reinterpret_cast<PFNGLTEXCOORD3I>(IntGetProcAddress("glTexCoord3i"));
			if(!glTexCoord3i) ++numFailed;
			glTexCoord3iv = reinterpret_cast<PFNGLTEXCOORD3IV>(IntGetProcAddress("glTexCoord3iv"));
			if(!glTexCoord3iv) ++numFailed;
			glTexCoord3s = reinterpret_cast<PFNGLTEXCOORD3S>(IntGetProcAddress("glTexCoord3s"));
			if(!glTexCoord3s) ++numFailed;
			glTexCoord3sv = reinterpret_cast<PFNGLTEXCOORD3SV>(IntGetProcAddress("glTexCoord3sv"));
			if(!glTexCoord3sv) ++numFailed;
			glTexCoord4d = reinterpret_cast<PFNGLTEXCOORD4D>(IntGetProcAddress("glTexCoord4d"));
			if(!glTexCoord4d) ++numFailed;
			glTexCoord4dv = reinterpret_cast<PFNGLTEXCOORD4DV>(IntGetProcAddress("glTexCoord4dv"));
			if(!glTexCoord4dv) ++numFailed;
			glTexCoord4f = reinterpret_cast<PFNGLTEXCOORD4F>(IntGetProcAddress("glTexCoord4f"));
			if(!glTexCoord4f) ++numFailed;
			glTexCoord4fv = reinterpret_cast<PFNGLTEXCOORD4FV>(IntGetProcAddress("glTexCoord4fv"));
			if(!glTexCoord4fv) ++numFailed;
			glTexCoord4i = reinterpret_cast<PFNGLTEXCOORD4I>(IntGetProcAddress("glTexCoord4i"));
			if(!glTexCoord4i) ++numFailed;
			glTexCoord4iv = reinterpret_cast<PFNGLTEXCOORD4IV>(IntGetProcAddress("glTexCoord4iv"));
			if(!glTexCoord4iv) ++numFailed;
			glTexCoord4s = reinterpret_cast<PFNGLTEXCOORD4S>(IntGetProcAddress("glTexCoord4s"));
			if(!glTexCoord4s) ++numFailed;
			glTexCoord4sv = reinterpret_cast<PFNGLTEXCOORD4SV>(IntGetProcAddress("glTexCoord4sv"));
			if(!glTexCoord4sv) ++numFailed;
			glTexEnvf = reinterpret_cast<PFNGLTEXENVF>(IntGetProcAddress("glTexEnvf"));
			if(!glTexEnvf) ++numFailed;
			glTexEnvfv = reinterpret_cast<PFNGLTEXENVFV>(IntGetProcAddress("glTexEnvfv"));
			if(!glTexEnvfv) ++numFailed;
			glTexEnvi = reinterpret_cast<PFNGLTEXENVI>(IntGetProcAddress("glTexEnvi"));
			if(!glTexEnvi) ++numFailed;
			glTexEnviv = reinterpret_cast<PFNGLTEXENVIV>(IntGetProcAddress("glTexEnviv"));
			if(!glTexEnviv) ++numFailed;
			glTexGend = reinterpret_cast<PFNGLTEXGEND>(IntGetProcAddress("glTexGend"));
			if(!glTexGend) ++numFailed;
			glTexGendv = reinterpret_cast<PFNGLTEXGENDV>(IntGetProcAddress("glTexGendv"));
			if(!glTexGendv) ++numFailed;
			glTexGenf = reinterpret_cast<PFNGLTEXGENF>(IntGetProcAddress("glTexGenf"));
			if(!glTexGenf) ++numFailed;
			glTexGenfv = reinterpret_cast<PFNGLTEXGENFV>(IntGetProcAddress("glTexGenfv"));
			if(!glTexGenfv) ++numFailed;
			glTexGeni = reinterpret_cast<PFNGLTEXGENI>(IntGetProcAddress("glTexGeni"));
			if(!glTexGeni) ++numFailed;
			glTexGeniv = reinterpret_cast<PFNGLTEXGENIV>(IntGetProcAddress("glTexGeniv"));
			if(!glTexGeniv) ++numFailed;
			glTexImage1D = reinterpret_cast<PFNGLTEXIMAGE1D>(IntGetProcAddress("glTexImage1D"));
			if(!glTexImage1D) ++numFailed;
			glTexImage2D = reinterpret_cast<PFNGLTEXIMAGE2D>(IntGetProcAddress("glTexImage2D"));
			if(!glTexImage2D) ++numFailed;
			glTexParameterf = reinterpret_cast<PFNGLTEXPARAMETERF>(IntGetProcAddress("glTexParameterf"));
			if(!glTexParameterf) ++numFailed;
			glTexParameterfv = reinterpret_cast<PFNGLTEXPARAMETERFV>(IntGetProcAddress("glTexParameterfv"));
			if(!glTexParameterfv) ++numFailed;
			glTexParameteri = reinterpret_cast<PFNGLTEXPARAMETERI>(IntGetProcAddress("glTexParameteri"));
			if(!glTexParameteri) ++numFailed;
			glTexParameteriv = reinterpret_cast<PFNGLTEXPARAMETERIV>(IntGetProcAddress("glTexParameteriv"));
			if(!glTexParameteriv) ++numFailed;
			glTranslated = reinterpret_cast<PFNGLTRANSLATED>(IntGetProcAddress("glTranslated"));
			if(!glTranslated) ++numFailed;
			glTranslatef = reinterpret_cast<PFNGLTRANSLATEF>(IntGetProcAddress("glTranslatef"));
			if(!glTranslatef) ++numFailed;
			glVertex2d = reinterpret_cast<PFNGLVERTEX2D>(IntGetProcAddress("glVertex2d"));
			if(!glVertex2d) ++numFailed;
			glVertex2dv = reinterpret_cast<PFNGLVERTEX2DV>(IntGetProcAddress("glVertex2dv"));
			if(!glVertex2dv) ++numFailed;
			glVertex2f = reinterpret_cast<PFNGLVERTEX2F>(IntGetProcAddress("glVertex2f"));
			if(!glVertex2f) ++numFailed;
			glVertex2fv = reinterpret_cast<PFNGLVERTEX2FV>(IntGetProcAddress("glVertex2fv"));
			if(!glVertex2fv) ++numFailed;
			glVertex2i = reinterpret_cast<PFNGLVERTEX2I>(IntGetProcAddress("glVertex2i"));
			if(!glVertex2i) ++numFailed;
			glVertex2iv = reinterpret_cast<PFNGLVERTEX2IV>(IntGetProcAddress("glVertex2iv"));
			if(!glVertex2iv) ++numFailed;
			glVertex2s = reinterpret_cast<PFNGLVERTEX2S>(IntGetProcAddress("glVertex2s"));
			if(!glVertex2s) ++numFailed;
			glVertex2sv = reinterpret_cast<PFNGLVERTEX2SV>(IntGetProcAddress("glVertex2sv"));
			if(!glVertex2sv) ++numFailed;
			glVertex3d = reinterpret_cast<PFNGLVERTEX3D>(IntGetProcAddress("glVertex3d"));
			if(!glVertex3d) ++numFailed;
			glVertex3dv = reinterpret_cast<PFNGLVERTEX3DV>(IntGetProcAddress("glVertex3dv"));
			if(!glVertex3dv) ++numFailed;
			glVertex3f = reinterpret_cast<PFNGLVERTEX3F>(IntGetProcAddress("glVertex3f"));
			if(!glVertex3f) ++numFailed;
			glVertex3fv = reinterpret_cast<PFNGLVERTEX3FV>(IntGetProcAddress("glVertex3fv"));
			if(!glVertex3fv) ++numFailed;
			glVertex3i = reinterpret_cast<PFNGLVERTEX3I>(IntGetProcAddress("glVertex3i"));
			if(!glVertex3i) ++numFailed;
			glVertex3iv = reinterpret_cast<PFNGLVERTEX3IV>(IntGetProcAddress("glVertex3iv"));
			if(!glVertex3iv) ++numFailed;
			glVertex3s = reinterpret_cast<PFNGLVERTEX3S>(IntGetProcAddress("glVertex3s"));
			if(!glVertex3s) ++numFailed;
			glVertex3sv = reinterpret_cast<PFNGLVERTEX3SV>(IntGetProcAddress("glVertex3sv"));
			if(!glVertex3sv) ++numFailed;
			glVertex4d = reinterpret_cast<PFNGLVERTEX4D>(IntGetProcAddress("glVertex4d"));
			if(!glVertex4d) ++numFailed;
			glVertex4dv = reinterpret_cast<PFNGLVERTEX4DV>(IntGetProcAddress("glVertex4dv"));
			if(!glVertex4dv) ++numFailed;
			glVertex4f = reinterpret_cast<PFNGLVERTEX4F>(IntGetProcAddress("glVertex4f"));
			if(!glVertex4f) ++numFailed;
			glVertex4fv = reinterpret_cast<PFNGLVERTEX4FV>(IntGetProcAddress("glVertex4fv"));
			if(!glVertex4fv) ++numFailed;
			glVertex4i = reinterpret_cast<PFNGLVERTEX4I>(IntGetProcAddress("glVertex4i"));
			if(!glVertex4i) ++numFailed;
			glVertex4iv = reinterpret_cast<PFNGLVERTEX4IV>(IntGetProcAddress("glVertex4iv"));
			if(!glVertex4iv) ++numFailed;
			glVertex4s = reinterpret_cast<PFNGLVERTEX4S>(IntGetProcAddress("glVertex4s"));
			if(!glVertex4s) ++numFailed;
			glVertex4sv = reinterpret_cast<PFNGLVERTEX4SV>(IntGetProcAddress("glVertex4sv"));
			if(!glVertex4sv) ++numFailed;
			glViewport = reinterpret_cast<PFNGLVIEWPORT>(IntGetProcAddress("glViewport"));
			if(!glViewport) ++numFailed;
			glAreTexturesResident = reinterpret_cast<PFNGLARETEXTURESRESIDENT>(IntGetProcAddress("glAreTexturesResident"));
			if(!glAreTexturesResident) ++numFailed;
			glArrayElement = reinterpret_cast<PFNGLARRAYELEMENT>(IntGetProcAddress("glArrayElement"));
			if(!glArrayElement) ++numFailed;
			glBindTexture = reinterpret_cast<PFNGLBINDTEXTURE>(IntGetProcAddress("glBindTexture"));
			if(!glBindTexture) ++numFailed;
			glColorPointer = reinterpret_cast<PFNGLCOLORPOINTER>(IntGetProcAddress("glColorPointer"));
			if(!glColorPointer) ++numFailed;
			glCopyTexImage1D = reinterpret_cast<PFNGLCOPYTEXIMAGE1D>(IntGetProcAddress("glCopyTexImage1D"));
			if(!glCopyTexImage1D) ++numFailed;
			glCopyTexImage2D = reinterpret_cast<PFNGLCOPYTEXIMAGE2D>(IntGetProcAddress("glCopyTexImage2D"));
			if(!glCopyTexImage2D) ++numFailed;
			glCopyTexSubImage1D = reinterpret_cast<PFNGLCOPYTEXSUBIMAGE1D>(IntGetProcAddress("glCopyTexSubImage1D"));
			if(!glCopyTexSubImage1D) ++numFailed;
			glCopyTexSubImage2D = reinterpret_cast<PFNGLCOPYTEXSUBIMAGE2D>(IntGetProcAddress("glCopyTexSubImage2D"));
			if(!glCopyTexSubImage2D) ++numFailed;
			glDeleteTextures = reinterpret_cast<PFNGLDELETETEXTURES>(IntGetProcAddress("glDeleteTextures"));
			if(!glDeleteTextures) ++numFailed;
			glDisableClientState = reinterpret_cast<PFNGLDISABLECLIENTSTATE>(IntGetProcAddress("glDisableClientState"));
			if(!glDisableClientState) ++numFailed;
			glDrawArrays = reinterpret_cast<PFNGLDRAWARRAYS>(IntGetProcAddress("glDrawArrays"));
			if(!glDrawArrays) ++numFailed;
			glDrawElements = reinterpret_cast<PFNGLDRAWELEMENTS>(IntGetProcAddress("glDrawElements"));
			if(!glDrawElements) ++numFailed;
			glEdgeFlagPointer = reinterpret_cast<PFNGLEDGEFLAGPOINTER>(IntGetProcAddress("glEdgeFlagPointer"));
			if(!glEdgeFlagPointer) ++numFailed;
			glEnableClientState = reinterpret_cast<PFNGLENABLECLIENTSTATE>(IntGetProcAddress("glEnableClientState"));
			if(!glEnableClientState) ++numFailed;
			glGenTextures = reinterpret_cast<PFNGLGENTEXTURES>(IntGetProcAddress("glGenTextures"));
			if(!glGenTextures) ++numFailed;
			glGetPointerv = reinterpret_cast<PFNGLGETPOINTERV>(IntGetProcAddress("glGetPointerv"));
			if(!glGetPointerv) ++numFailed;
			glIndexPointer = reinterpret_cast<PFNGLINDEXPOINTER>(IntGetProcAddress("glIndexPointer"));
			if(!glIndexPointer) ++numFailed;
			glIndexub = reinterpret_cast<PFNGLINDEXUB>(IntGetProcAddress("glIndexub"));
			if(!glIndexub) ++numFailed;
			glIndexubv = reinterpret_cast<PFNGLINDEXUBV>(IntGetProcAddress("glIndexubv"));
			if(!glIndexubv) ++numFailed;
			glInterleavedArrays = reinterpret_cast<PFNGLINTERLEAVEDARRAYS>(IntGetProcAddress("glInterleavedArrays"));
			if(!glInterleavedArrays) ++numFailed;
			glIsTexture = reinterpret_cast<PFNGLISTEXTURE>(IntGetProcAddress("glIsTexture"));
			if(!glIsTexture) ++numFailed;
			glNormalPointer = reinterpret_cast<PFNGLNORMALPOINTER>(IntGetProcAddress("glNormalPointer"));
			if(!glNormalPointer) ++numFailed;
			glPolygonOffset = reinterpret_cast<PFNGLPOLYGONOFFSET>(IntGetProcAddress("glPolygonOffset"));
			if(!glPolygonOffset) ++numFailed;
			glPopClientAttrib = reinterpret_cast<PFNGLPOPCLIENTATTRIB>(IntGetProcAddress("glPopClientAttrib"));
			if(!glPopClientAttrib) ++numFailed;
			glPrioritizeTextures = reinterpret_cast<PFNGLPRIORITIZETEXTURES>(IntGetProcAddress("glPrioritizeTextures"));
			if(!glPrioritizeTextures) ++numFailed;
			glPushClientAttrib = reinterpret_cast<PFNGLPUSHCLIENTATTRIB>(IntGetProcAddress("glPushClientAttrib"));
			if(!glPushClientAttrib) ++numFailed;
			glTexCoordPointer = reinterpret_cast<PFNGLTEXCOORDPOINTER>(IntGetProcAddress("glTexCoordPointer"));
			if(!glTexCoordPointer) ++numFailed;
			glTexSubImage1D = reinterpret_cast<PFNGLTEXSUBIMAGE1D>(IntGetProcAddress("glTexSubImage1D"));
			if(!glTexSubImage1D) ++numFailed;
			glTexSubImage2D = reinterpret_cast<PFNGLTEXSUBIMAGE2D>(IntGetProcAddress("glTexSubImage2D"));
			if(!glTexSubImage2D) ++numFailed;
			glVertexPointer = reinterpret_cast<PFNGLVERTEXPOINTER>(IntGetProcAddress("glVertexPointer"));
			if(!glVertexPointer) ++numFailed;
			glCopyTexSubImage3D = reinterpret_cast<PFNGLCOPYTEXSUBIMAGE3D>(IntGetProcAddress("glCopyTexSubImage3D"));
			if(!glCopyTexSubImage3D) ++numFailed;
			glDrawRangeElements = reinterpret_cast<PFNGLDRAWRANGEELEMENTS>(IntGetProcAddress("glDrawRangeElements"));
			if(!glDrawRangeElements) ++numFailed;
			glTexImage3D = reinterpret_cast<PFNGLTEXIMAGE3D>(IntGetProcAddress("glTexImage3D"));
			if(!glTexImage3D) ++numFailed;
			glTexSubImage3D = reinterpret_cast<PFNGLTEXSUBIMAGE3D>(IntGetProcAddress("glTexSubImage3D"));
			if(!glTexSubImage3D) ++numFailed;
			glActiveTexture = reinterpret_cast<PFNGLACTIVETEXTURE>(IntGetProcAddress("glActiveTexture"));
			if(!glActiveTexture) ++numFailed;
			glClientActiveTexture = reinterpret_cast<PFNGLCLIENTACTIVETEXTURE>(IntGetProcAddress("glClientActiveTexture"));
			if(!glClientActiveTexture) ++numFailed;
			glCompressedTexImage1D = reinterpret_cast<PFNGLCOMPRESSEDTEXIMAGE1D>(IntGetProcAddress("glCompressedTexImage1D"));
			if(!glCompressedTexImage1D) ++numFailed;
			glCompressedTexImage2D = reinterpret_cast<PFNGLCOMPRESSEDTEXIMAGE2D>(IntGetProcAddress("glCompressedTexImage2D"));
			if(!glCompressedTexImage2D) ++numFailed;
			glCompressedTexImage3D = reinterpret_cast<PFNGLCOMPRESSEDTEXIMAGE3D>(IntGetProcAddress("glCompressedTexImage3D"));
			if(!glCompressedTexImage3D) ++numFailed;
			glCompressedTexSubImage1D = reinterpret_cast<PFNGLCOMPRESSEDTEXSUBIMAGE1D>(IntGetProcAddress("glCompressedTexSubImage1D"));
			if(!glCompressedTexSubImage1D) ++numFailed;
			glCompressedTexSubImage2D = reinterpret_cast<PFNGLCOMPRESSEDTEXSUBIMAGE2D>(IntGetProcAddress("glCompressedTexSubImage2D"));
			if(!glCompressedTexSubImage2D) ++numFailed;
			glCompressedTexSubImage3D = reinterpret_cast<PFNGLCOMPRESSEDTEXSUBIMAGE3D>(IntGetProcAddress("glCompressedTexSubImage3D"));
			if(!glCompressedTexSubImage3D) ++numFailed;
			glGetCompressedTexImage = reinterpret_cast<PFNGLGETCOMPRESSEDTEXIMAGE>(IntGetProcAddress("glGetCompressedTexImage"));
			if(!glGetCompressedTexImage) ++numFailed;
			glLoadTransposeMatrixd = reinterpret_cast<PFNGLLOADTRANSPOSEMATRIXD>(IntGetProcAddress("glLoadTransposeMatrixd"));
			if(!glLoadTransposeMatrixd) ++numFailed;
			glLoadTransposeMatrixf = reinterpret_cast<PFNGLLOADTRANSPOSEMATRIXF>(IntGetProcAddress("glLoadTransposeMatrixf"));
			if(!glLoadTransposeMatrixf) ++numFailed;
			glMultTransposeMatrixd = reinterpret_cast<PFNGLMULTTRANSPOSEMATRIXD>(IntGetProcAddress("glMultTransposeMatrixd"));
			if(!glMultTransposeMatrixd) ++numFailed;
			glMultTransposeMatrixf = reinterpret_cast<PFNGLMULTTRANSPOSEMATRIXF>(IntGetProcAddress("glMultTransposeMatrixf"));
			if(!glMultTransposeMatrixf) ++numFailed;
			glMultiTexCoord1d = reinterpret_cast<PFNGLMULTITEXCOORD1D>(IntGetProcAddress("glMultiTexCoord1d"));
			if(!glMultiTexCoord1d) ++numFailed;
			glMultiTexCoord1dv = reinterpret_cast<PFNGLMULTITEXCOORD1DV>(IntGetProcAddress("glMultiTexCoord1dv"));
			if(!glMultiTexCoord1dv) ++numFailed;
			glMultiTexCoord1f = reinterpret_cast<PFNGLMULTITEXCOORD1F>(IntGetProcAddress("glMultiTexCoord1f"));
			if(!glMultiTexCoord1f) ++numFailed;
			glMultiTexCoord1fv = reinterpret_cast<PFNGLMULTITEXCOORD1FV>(IntGetProcAddress("glMultiTexCoord1fv"));
			if(!glMultiTexCoord1fv) ++numFailed;
			glMultiTexCoord1i = reinterpret_cast<PFNGLMULTITEXCOORD1I>(IntGetProcAddress("glMultiTexCoord1i"));
			if(!glMultiTexCoord1i) ++numFailed;
			glMultiTexCoord1iv = reinterpret_cast<PFNGLMULTITEXCOORD1IV>(IntGetProcAddress("glMultiTexCoord1iv"));
			if(!glMultiTexCoord1iv) ++numFailed;
			glMultiTexCoord1s = reinterpret_cast<PFNGLMULTITEXCOORD1S>(IntGetProcAddress("glMultiTexCoord1s"));
			if(!glMultiTexCoord1s) ++numFailed;
			glMultiTexCoord1sv = reinterpret_cast<PFNGLMULTITEXCOORD1SV>(IntGetProcAddress("glMultiTexCoord1sv"));
			if(!glMultiTexCoord1sv) ++numFailed;
			glMultiTexCoord2d = reinterpret_cast<PFNGLMULTITEXCOORD2D>(IntGetProcAddress("glMultiTexCoord2d"));
			if(!glMultiTexCoord2d) ++numFailed;
			glMultiTexCoord2dv = reinterpret_cast<PFNGLMULTITEXCOORD2DV>(IntGetProcAddress("glMultiTexCoord2dv"));
			if(!glMultiTexCoord2dv) ++numFailed;
			glMultiTexCoord2f = reinterpret_cast<PFNGLMULTITEXCOORD2F>(IntGetProcAddress("glMultiTexCoord2f"));
			if(!glMultiTexCoord2f) ++numFailed;
			glMultiTexCoord2fv = reinterpret_cast<PFNGLMULTITEXCOORD2FV>(IntGetProcAddress("glMultiTexCoord2fv"));
			if(!glMultiTexCoord2fv) ++numFailed;
			glMultiTexCoord2i = reinterpret_cast<PFNGLMULTITEXCOORD2I>(IntGetProcAddress("glMultiTexCoord2i"));
			if(!glMultiTexCoord2i) ++numFailed;
			glMultiTexCoord2iv = reinterpret_cast<PFNGLMULTITEXCOORD2IV>(IntGetProcAddress("glMultiTexCoord2iv"));
			if(!glMultiTexCoord2iv) ++numFailed;
			glMultiTexCoord2s = reinterpret_cast<PFNGLMULTITEXCOORD2S>(IntGetProcAddress("glMultiTexCoord2s"));
			if(!glMultiTexCoord2s) ++numFailed;
			glMultiTexCoord2sv = reinterpret_cast<PFNGLMULTITEXCOORD2SV>(IntGetProcAddress("glMultiTexCoord2sv"));
			if(!glMultiTexCoord2sv) ++numFailed;
			glMultiTexCoord3d = reinterpret_cast<PFNGLMULTITEXCOORD3D>(IntGetProcAddress("glMultiTexCoord3d"));
			if(!glMultiTexCoord3d) ++numFailed;
			glMultiTexCoord3dv = reinterpret_cast<PFNGLMULTITEXCOORD3DV>(IntGetProcAddress("glMultiTexCoord3dv"));
			if(!glMultiTexCoord3dv) ++numFailed;
			glMultiTexCoord3f = reinterpret_cast<PFNGLMULTITEXCOORD3F>(IntGetProcAddress("glMultiTexCoord3f"));
			if(!glMultiTexCoord3f) ++numFailed;
			glMultiTexCoord3fv = reinterpret_cast<PFNGLMULTITEXCOORD3FV>(IntGetProcAddress("glMultiTexCoord3fv"));
			if(!glMultiTexCoord3fv) ++numFailed;
			glMultiTexCoord3i = reinterpret_cast<PFNGLMULTITEXCOORD3I>(IntGetProcAddress("glMultiTexCoord3i"));
			if(!glMultiTexCoord3i) ++numFailed;
			glMultiTexCoord3iv = reinterpret_cast<PFNGLMULTITEXCOORD3IV>(IntGetProcAddress("glMultiTexCoord3iv"));
			if(!glMultiTexCoord3iv) ++numFailed;
			glMultiTexCoord3s = reinterpret_cast<PFNGLMULTITEXCOORD3S>(IntGetProcAddress("glMultiTexCoord3s"));
			if(!glMultiTexCoord3s) ++numFailed;
			glMultiTexCoord3sv = reinterpret_cast<PFNGLMULTITEXCOORD3SV>(IntGetProcAddress("glMultiTexCoord3sv"));
			if(!glMultiTexCoord3sv) ++numFailed;
			glMultiTexCoord4d = reinterpret_cast<PFNGLMULTITEXCOORD4D>(IntGetProcAddress("glMultiTexCoord4d"));
			if(!glMultiTexCoord4d) ++numFailed;
			glMultiTexCoord4dv = reinterpret_cast<PFNGLMULTITEXCOORD4DV>(IntGetProcAddress("glMultiTexCoord4dv"));
			if(!glMultiTexCoord4dv) ++numFailed;
			glMultiTexCoord4f = reinterpret_cast<PFNGLMULTITEXCOORD4F>(IntGetProcAddress("glMultiTexCoord4f"));
			if(!glMultiTexCoord4f) ++numFailed;
			glMultiTexCoord4fv = reinterpret_cast<PFNGLMULTITEXCOORD4FV>(IntGetProcAddress("glMultiTexCoord4fv"));
			if(!glMultiTexCoord4fv) ++numFailed;
			glMultiTexCoord4i = reinterpret_cast<PFNGLMULTITEXCOORD4I>(IntGetProcAddress("glMultiTexCoord4i"));
			if(!glMultiTexCoord4i) ++numFailed;
			glMultiTexCoord4iv = reinterpret_cast<PFNGLMULTITEXCOORD4IV>(IntGetProcAddress("glMultiTexCoord4iv"));
			if(!glMultiTexCoord4iv) ++numFailed;
			glMultiTexCoord4s = reinterpret_cast<PFNGLMULTITEXCOORD4S>(IntGetProcAddress("glMultiTexCoord4s"));
			if(!glMultiTexCoord4s) ++numFailed;
			glMultiTexCoord4sv = reinterpret_cast<PFNGLMULTITEXCOORD4SV>(IntGetProcAddress("glMultiTexCoord4sv"));
			if(!glMultiTexCoord4sv) ++numFailed;
			glSampleCoverage = reinterpret_cast<PFNGLSAMPLECOVERAGE>(IntGetProcAddress("glSampleCoverage"));
			if(!glSampleCoverage) ++numFailed;
			glBlendColor = reinterpret_cast<PFNGLBLENDCOLOR>(IntGetProcAddress("glBlendColor"));
			if(!glBlendColor) ++numFailed;
			glBlendEquation = reinterpret_cast<PFNGLBLENDEQUATION>(IntGetProcAddress("glBlendEquation"));
			if(!glBlendEquation) ++numFailed;
			glBlendFuncSeparate = reinterpret_cast<PFNGLBLENDFUNCSEPARATE>(IntGetProcAddress("glBlendFuncSeparate"));
			if(!glBlendFuncSeparate) ++numFailed;
			glFogCoordPointer = reinterpret_cast<PFNGLFOGCOORDPOINTER>(IntGetProcAddress("glFogCoordPointer"));
			if(!glFogCoordPointer) ++numFailed;
			glFogCoordd = reinterpret_cast<PFNGLFOGCOORDD>(IntGetProcAddress("glFogCoordd"));
			if(!glFogCoordd) ++numFailed;
			glFogCoorddv = reinterpret_cast<PFNGLFOGCOORDDV>(IntGetProcAddress("glFogCoorddv"));
			if(!glFogCoorddv) ++numFailed;
			glFogCoordf = reinterpret_cast<PFNGLFOGCOORDF>(IntGetProcAddress("glFogCoordf"));
			if(!glFogCoordf) ++numFailed;
			glFogCoordfv = reinterpret_cast<PFNGLFOGCOORDFV>(IntGetProcAddress("glFogCoordfv"));
			if(!glFogCoordfv) ++numFailed;
			glMultiDrawArrays = reinterpret_cast<PFNGLMULTIDRAWARRAYS>(IntGetProcAddress("glMultiDrawArrays"));
			if(!glMultiDrawArrays) ++numFailed;
			glMultiDrawElements = reinterpret_cast<PFNGLMULTIDRAWELEMENTS>(IntGetProcAddress("glMultiDrawElements"));
			if(!glMultiDrawElements) ++numFailed;
			glPointParameterf = reinterpret_cast<PFNGLPOINTPARAMETERF>(IntGetProcAddress("glPointParameterf"));
			if(!glPointParameterf) ++numFailed;
			glPointParameterfv = reinterpret_cast<PFNGLPOINTPARAMETERFV>(IntGetProcAddress("glPointParameterfv"));
			if(!glPointParameterfv) ++numFailed;
			glPointParameteri = reinterpret_cast<PFNGLPOINTPARAMETERI>(IntGetProcAddress("glPointParameteri"));
			if(!glPointParameteri) ++numFailed;
			glPointParameteriv = reinterpret_cast<PFNGLPOINTPARAMETERIV>(IntGetProcAddress("glPointParameteriv"));
			if(!glPointParameteriv) ++numFailed;
			glSecondaryColor3b = reinterpret_cast<PFNGLSECONDARYCOLOR3B>(IntGetProcAddress("glSecondaryColor3b"));
			if(!glSecondaryColor3b) ++numFailed;
			glSecondaryColor3bv = reinterpret_cast<PFNGLSECONDARYCOLOR3BV>(IntGetProcAddress("glSecondaryColor3bv"));
			if(!glSecondaryColor3bv) ++numFailed;
			glSecondaryColor3d = reinterpret_cast<PFNGLSECONDARYCOLOR3D>(IntGetProcAddress("glSecondaryColor3d"));
			if(!glSecondaryColor3d) ++numFailed;
			glSecondaryColor3dv = reinterpret_cast<PFNGLSECONDARYCOLOR3DV>(IntGetProcAddress("glSecondaryColor3dv"));
			if(!glSecondaryColor3dv) ++numFailed;
			glSecondaryColor3f = reinterpret_cast<PFNGLSECONDARYCOLOR3F>(IntGetProcAddress("glSecondaryColor3f"));
			if(!glSecondaryColor3f) ++numFailed;
			glSecondaryColor3fv = reinterpret_cast<PFNGLSECONDARYCOLOR3FV>(IntGetProcAddress("glSecondaryColor3fv"));
			if(!glSecondaryColor3fv) ++numFailed;
			glSecondaryColor3i = reinterpret_cast<PFNGLSECONDARYCOLOR3I>(IntGetProcAddress("glSecondaryColor3i"));
			if(!glSecondaryColor3i) ++numFailed;
			glSecondaryColor3iv = reinterpret_cast<PFNGLSECONDARYCOLOR3IV>(IntGetProcAddress("glSecondaryColor3iv"));
			if(!glSecondaryColor3iv) ++numFailed;
			glSecondaryColor3s = reinterpret_cast<PFNGLSECONDARYCOLOR3S>(IntGetProcAddress("glSecondaryColor3s"));
			if(!glSecondaryColor3s) ++numFailed;
			glSecondaryColor3sv = reinterpret_cast<PFNGLSECONDARYCOLOR3SV>(IntGetProcAddress("glSecondaryColor3sv"));
			if(!glSecondaryColor3sv) ++numFailed;
			glSecondaryColor3ub = reinterpret_cast<PFNGLSECONDARYCOLOR3UB>(IntGetProcAddress("glSecondaryColor3ub"));
			if(!glSecondaryColor3ub) ++numFailed;
			glSecondaryColor3ubv = reinterpret_cast<PFNGLSECONDARYCOLOR3UBV>(IntGetProcAddress("glSecondaryColor3ubv"));
			if(!glSecondaryColor3ubv) ++numFailed;
			glSecondaryColor3ui = reinterpret_cast<PFNGLSECONDARYCOLOR3UI>(IntGetProcAddress("glSecondaryColor3ui"));
			if(!glSecondaryColor3ui) ++numFailed;
			glSecondaryColor3uiv = reinterpret_cast<PFNGLSECONDARYCOLOR3UIV>(IntGetProcAddress("glSecondaryColor3uiv"));
			if(!glSecondaryColor3uiv) ++numFailed;
			glSecondaryColor3us = reinterpret_cast<PFNGLSECONDARYCOLOR3US>(IntGetProcAddress("glSecondaryColor3us"));
			if(!glSecondaryColor3us) ++numFailed;
			glSecondaryColor3usv = reinterpret_cast<PFNGLSECONDARYCOLOR3USV>(IntGetProcAddress("glSecondaryColor3usv"));
			if(!glSecondaryColor3usv) ++numFailed;
			glSecondaryColorPointer = reinterpret_cast<PFNGLSECONDARYCOLORPOINTER>(IntGetProcAddress("glSecondaryColorPointer"));
			if(!glSecondaryColorPointer) ++numFailed;
			glWindowPos2d = reinterpret_cast<PFNGLWINDOWPOS2D>(IntGetProcAddress("glWindowPos2d"));
			if(!glWindowPos2d) ++numFailed;
			glWindowPos2dv = reinterpret_cast<PFNGLWINDOWPOS2DV>(IntGetProcAddress("glWindowPos2dv"));
			if(!glWindowPos2dv) ++numFailed;
			glWindowPos2f = reinterpret_cast<PFNGLWINDOWPOS2F>(IntGetProcAddress("glWindowPos2f"));
			if(!glWindowPos2f) ++numFailed;
			glWindowPos2fv = reinterpret_cast<PFNGLWINDOWPOS2FV>(IntGetProcAddress("glWindowPos2fv"));
			if(!glWindowPos2fv) ++numFailed;
			glWindowPos2i = reinterpret_cast<PFNGLWINDOWPOS2I>(IntGetProcAddress("glWindowPos2i"));
			if(!glWindowPos2i) ++numFailed;
			glWindowPos2iv = reinterpret_cast<PFNGLWINDOWPOS2IV>(IntGetProcAddress("glWindowPos2iv"));
			if(!glWindowPos2iv) ++numFailed;
			glWindowPos2s = reinterpret_cast<PFNGLWINDOWPOS2S>(IntGetProcAddress("glWindowPos2s"));
			if(!glWindowPos2s) ++numFailed;
			glWindowPos2sv = reinterpret_cast<PFNGLWINDOWPOS2SV>(IntGetProcAddress("glWindowPos2sv"));
			if(!glWindowPos2sv) ++numFailed;
			glWindowPos3d = reinterpret_cast<PFNGLWINDOWPOS3D>(IntGetProcAddress("glWindowPos3d"));
			if(!glWindowPos3d) ++numFailed;
			glWindowPos3dv = reinterpret_cast<PFNGLWINDOWPOS3DV>(IntGetProcAddress("glWindowPos3dv"));
			if(!glWindowPos3dv) ++numFailed;
			glWindowPos3f = reinterpret_cast<PFNGLWINDOWPOS3F>(IntGetProcAddress("glWindowPos3f"));
			if(!glWindowPos3f) ++numFailed;
			glWindowPos3fv = reinterpret_cast<PFNGLWINDOWPOS3FV>(IntGetProcAddress("glWindowPos3fv"));
			if(!glWindowPos3fv) ++numFailed;
			glWindowPos3i = reinterpret_cast<PFNGLWINDOWPOS3I>(IntGetProcAddress("glWindowPos3i"));
			if(!glWindowPos3i) ++numFailed;
			glWindowPos3iv = reinterpret_cast<PFNGLWINDOWPOS3IV>(IntGetProcAddress("glWindowPos3iv"));
			if(!glWindowPos3iv) ++numFailed;
			glWindowPos3s = reinterpret_cast<PFNGLWINDOWPOS3S>(IntGetProcAddress("glWindowPos3s"));
			if(!glWindowPos3s) ++numFailed;
			glWindowPos3sv = reinterpret_cast<PFNGLWINDOWPOS3SV>(IntGetProcAddress("glWindowPos3sv"));
			if(!glWindowPos3sv) ++numFailed;
			glBeginQuery = reinterpret_cast<PFNGLBEGINQUERY>(IntGetProcAddress("glBeginQuery"));
			if(!glBeginQuery) ++numFailed;
			glBindBuffer = reinterpret_cast<PFNGLBINDBUFFER>(IntGetProcAddress("glBindBuffer"));
			if(!glBindBuffer) ++numFailed;
			glBufferData = reinterpret_cast<PFNGLBUFFERDATA>(IntGetProcAddress("glBufferData"));
			if(!glBufferData) ++numFailed;
			glBufferSubData = reinterpret_cast<PFNGLBUFFERSUBDATA>(IntGetProcAddress("glBufferSubData"));
			if(!glBufferSubData) ++numFailed;
			glDeleteBuffers = reinterpret_cast<PFNGLDELETEBUFFERS>(IntGetProcAddress("glDeleteBuffers"));
			if(!glDeleteBuffers) ++numFailed;
			glDeleteQueries = reinterpret_cast<PFNGLDELETEQUERIES>(IntGetProcAddress("glDeleteQueries"));
			if(!glDeleteQueries) ++numFailed;
			glEndQuery = reinterpret_cast<PFNGLENDQUERY>(IntGetProcAddress("glEndQuery"));
			if(!glEndQuery) ++numFailed;
			glGenBuffers = reinterpret_cast<PFNGLGENBUFFERS>(IntGetProcAddress("glGenBuffers"));
			if(!glGenBuffers) ++numFailed;
			glGenQueries = reinterpret_cast<PFNGLGENQUERIES>(IntGetProcAddress("glGenQueries"));
			if(!glGenQueries) ++numFailed;
			glGetBufferParameteriv = reinterpret_cast<PFNGLGETBUFFERPARAMETERIV>(IntGetProcAddress("glGetBufferParameteriv"));
			if(!glGetBufferParameteriv) ++numFailed;
			glGetBufferPointerv = reinterpret_cast<PFNGLGETBUFFERPOINTERV>(IntGetProcAddress("glGetBufferPointerv"));
			if(!glGetBufferPointerv) ++numFailed;
			glGetBufferSubData = reinterpret_cast<PFNGLGETBUFFERSUBDATA>(IntGetProcAddress("glGetBufferSubData"));
			if(!glGetBufferSubData) ++numFailed;
			glGetQueryObjectiv = reinterpret_cast<PFNGLGETQUERYOBJECTIV>(IntGetProcAddress("glGetQueryObjectiv"));
			if(!glGetQueryObjectiv) ++numFailed;
			glGetQueryObjectuiv = reinterpret_cast<PFNGLGETQUERYOBJECTUIV>(IntGetProcAddress("glGetQueryObjectuiv"));
			if(!glGetQueryObjectuiv) ++numFailed;
			glGetQueryiv = reinterpret_cast<PFNGLGETQUERYIV>(IntGetProcAddress("glGetQueryiv"));
			if(!glGetQueryiv) ++numFailed;
			glIsBuffer = reinterpret_cast<PFNGLISBUFFER>(IntGetProcAddress("glIsBuffer"));
			if(!glIsBuffer) ++numFailed;
			glIsQuery = reinterpret_cast<PFNGLISQUERY>(IntGetProcAddress("glIsQuery"));
			if(!glIsQuery) ++numFailed;
			glMapBuffer = reinterpret_cast<PFNGLMAPBUFFER>(IntGetProcAddress("glMapBuffer"));
			if(!glMapBuffer) ++numFailed;
			glUnmapBuffer = reinterpret_cast<PFNGLUNMAPBUFFER>(IntGetProcAddress("glUnmapBuffer"));
			if(!glUnmapBuffer) ++numFailed;
			glAttachShader = reinterpret_cast<PFNGLATTACHSHADER>(IntGetProcAddress("glAttachShader"));
			if(!glAttachShader) ++numFailed;
			glBindAttribLocation = reinterpret_cast<PFNGLBINDATTRIBLOCATION>(IntGetProcAddress("glBindAttribLocation"));
			if(!glBindAttribLocation) ++numFailed;
			glBlendEquationSeparate = reinterpret_cast<PFNGLBLENDEQUATIONSEPARATE>(IntGetProcAddress("glBlendEquationSeparate"));
			if(!glBlendEquationSeparate) ++numFailed;
			glCompileShader = reinterpret_cast<PFNGLCOMPILESHADER>(IntGetProcAddress("glCompileShader"));
			if(!glCompileShader) ++numFailed;
			glCreateProgram = reinterpret_cast<PFNGLCREATEPROGRAM>(IntGetProcAddress("glCreateProgram"));
			if(!glCreateProgram) ++numFailed;
			glCreateShader = reinterpret_cast<PFNGLCREATESHADER>(IntGetProcAddress("glCreateShader"));
			if(!glCreateShader) ++numFailed;
			glDeleteProgram = reinterpret_cast<PFNGLDELETEPROGRAM>(IntGetProcAddress("glDeleteProgram"));
			if(!glDeleteProgram) ++numFailed;
			glDeleteShader = reinterpret_cast<PFNGLDELETESHADER>(IntGetProcAddress("glDeleteShader"));
			if(!glDeleteShader) ++numFailed;
			glDetachShader = reinterpret_cast<PFNGLDETACHSHADER>(IntGetProcAddress("glDetachShader"));
			if(!glDetachShader) ++numFailed;
			glDisableVertexAttribArray = reinterpret_cast<PFNGLDISABLEVERTEXATTRIBARRAY>(IntGetProcAddress("glDisableVertexAttribArray"));
			if(!glDisableVertexAttribArray) ++numFailed;
			glDrawBuffers = reinterpret_cast<PFNGLDRAWBUFFERS>(IntGetProcAddress("glDrawBuffers"));
			if(!glDrawBuffers) ++numFailed;
			glEnableVertexAttribArray = reinterpret_cast<PFNGLENABLEVERTEXATTRIBARRAY>(IntGetProcAddress("glEnableVertexAttribArray"));
			if(!glEnableVertexAttribArray) ++numFailed;
			glGetActiveAttrib = reinterpret_cast<PFNGLGETACTIVEATTRIB>(IntGetProcAddress("glGetActiveAttrib"));
			if(!glGetActiveAttrib) ++numFailed;
			glGetActiveUniform = reinterpret_cast<PFNGLGETACTIVEUNIFORM>(IntGetProcAddress("glGetActiveUniform"));
			if(!glGetActiveUniform) ++numFailed;
			glGetAttachedShaders = reinterpret_cast<PFNGLGETATTACHEDSHADERS>(IntGetProcAddress("glGetAttachedShaders"));
			if(!glGetAttachedShaders) ++numFailed;
			glGetAttribLocation = reinterpret_cast<PFNGLGETATTRIBLOCATION>(IntGetProcAddress("glGetAttribLocation"));
			if(!glGetAttribLocation) ++numFailed;
			glGetProgramInfoLog = reinterpret_cast<PFNGLGETPROGRAMINFOLOG>(IntGetProcAddress("glGetProgramInfoLog"));
			if(!glGetProgramInfoLog) ++numFailed;
			glGetProgramiv = reinterpret_cast<PFNGLGETPROGRAMIV>(IntGetProcAddress("glGetProgramiv"));
			if(!glGetProgramiv) ++numFailed;
			glGetShaderInfoLog = reinterpret_cast<PFNGLGETSHADERINFOLOG>(IntGetProcAddress("glGetShaderInfoLog"));
			if(!glGetShaderInfoLog) ++numFailed;
			glGetShaderSource = reinterpret_cast<PFNGLGETSHADERSOURCE>(IntGetProcAddress("glGetShaderSource"));
			if(!glGetShaderSource) ++numFailed;
			glGetShaderiv = reinterpret_cast<PFNGLGETSHADERIV>(IntGetProcAddress("glGetShaderiv"));
			if(!glGetShaderiv) ++numFailed;
			glGetUniformLocation = reinterpret_cast<PFNGLGETUNIFORMLOCATION>(IntGetProcAddress("glGetUniformLocation"));
			if(!glGetUniformLocation) ++numFailed;
			glGetUniformfv = reinterpret_cast<PFNGLGETUNIFORMFV>(IntGetProcAddress("glGetUniformfv"));
			if(!glGetUniformfv) ++numFailed;
			glGetUniformiv = reinterpret_cast<PFNGLGETUNIFORMIV>(IntGetProcAddress("glGetUniformiv"));
			if(!glGetUniformiv) ++numFailed;
			glGetVertexAttribPointerv = reinterpret_cast<PFNGLGETVERTEXATTRIBPOINTERV>(IntGetProcAddress("glGetVertexAttribPointerv"));
			if(!glGetVertexAttribPointerv) ++numFailed;
			glGetVertexAttribdv = reinterpret_cast<PFNGLGETVERTEXATTRIBDV>(IntGetProcAddress("glGetVertexAttribdv"));
			if(!glGetVertexAttribdv) ++numFailed;
			glGetVertexAttribfv = reinterpret_cast<PFNGLGETVERTEXATTRIBFV>(IntGetProcAddress("glGetVertexAttribfv"));
			if(!glGetVertexAttribfv) ++numFailed;
			glGetVertexAttribiv = reinterpret_cast<PFNGLGETVERTEXATTRIBIV>(IntGetProcAddress("glGetVertexAttribiv"));
			if(!glGetVertexAttribiv) ++numFailed;
			glIsProgram = reinterpret_cast<PFNGLISPROGRAM>(IntGetProcAddress("glIsProgram"));
			if(!glIsProgram) ++numFailed;
			glIsShader = reinterpret_cast<PFNGLISSHADER>(IntGetProcAddress("glIsShader"));
			if(!glIsShader) ++numFailed;
			glLinkProgram = reinterpret_cast<PFNGLLINKPROGRAM>(IntGetProcAddress("glLinkProgram"));
			if(!glLinkProgram) ++numFailed;
			glShaderSource = reinterpret_cast<PFNGLSHADERSOURCE>(IntGetProcAddress("glShaderSource"));
			if(!glShaderSource) ++numFailed;
			glStencilFuncSeparate = reinterpret_cast<PFNGLSTENCILFUNCSEPARATE>(IntGetProcAddress("glStencilFuncSeparate"));
			if(!glStencilFuncSeparate) ++numFailed;
			glStencilMaskSeparate = reinterpret_cast<PFNGLSTENCILMASKSEPARATE>(IntGetProcAddress("glStencilMaskSeparate"));
			if(!glStencilMaskSeparate) ++numFailed;
			glStencilOpSeparate = reinterpret_cast<PFNGLSTENCILOPSEPARATE>(IntGetProcAddress("glStencilOpSeparate"));
			if(!glStencilOpSeparate) ++numFailed;
			glUniform1f = reinterpret_cast<PFNGLUNIFORM1F>(IntGetProcAddress("glUniform1f"));
			if(!glUniform1f) ++numFailed;
			glUniform1fv = reinterpret_cast<PFNGLUNIFORM1FV>(IntGetProcAddress("glUniform1fv"));
			if(!glUniform1fv) ++numFailed;
			glUniform1i = reinterpret_cast<PFNGLUNIFORM1I>(IntGetProcAddress("glUniform1i"));
			if(!glUniform1i) ++numFailed;
			glUniform1iv = reinterpret_cast<PFNGLUNIFORM1IV>(IntGetProcAddress("glUniform1iv"));
			if(!glUniform1iv) ++numFailed;
			glUniform2f = reinterpret_cast<PFNGLUNIFORM2F>(IntGetProcAddress("glUniform2f"));
			if(!glUniform2f) ++numFailed;
			glUniform2fv = reinterpret_cast<PFNGLUNIFORM2FV>(IntGetProcAddress("glUniform2fv"));
			if(!glUniform2fv) ++numFailed;
			glUniform2i = reinterpret_cast<PFNGLUNIFORM2I>(IntGetProcAddress("glUniform2i"));
			if(!glUniform2i) ++numFailed;
			glUniform2iv = reinterpret_cast<PFNGLUNIFORM2IV>(IntGetProcAddress("glUniform2iv"));
			if(!glUniform2iv) ++numFailed;
			glUniform3f = reinterpret_cast<PFNGLUNIFORM3F>(IntGetProcAddress("glUniform3f"));
			if(!glUniform3f) ++numFailed;
			glUniform3fv = reinterpret_cast<PFNGLUNIFORM3FV>(IntGetProcAddress("glUniform3fv"));
			if(!glUniform3fv) ++numFailed;
			glUniform3i = reinterpret_cast<PFNGLUNIFORM3I>(IntGetProcAddress("glUniform3i"));
			if(!glUniform3i) ++numFailed;
			glUniform3iv = reinterpret_cast<PFNGLUNIFORM3IV>(IntGetProcAddress("glUniform3iv"));
			if(!glUniform3iv) ++numFailed;
			glUniform4f = reinterpret_cast<PFNGLUNIFORM4F>(IntGetProcAddress("glUniform4f"));
			if(!glUniform4f) ++numFailed;
			glUniform4fv = reinterpret_cast<PFNGLUNIFORM4FV>(IntGetProcAddress("glUniform4fv"));
			if(!glUniform4fv) ++numFailed;
			glUniform4i = reinterpret_cast<PFNGLUNIFORM4I>(IntGetProcAddress("glUniform4i"));
			if(!glUniform4i) ++numFailed;
			glUniform4iv = reinterpret_cast<PFNGLUNIFORM4IV>(IntGetProcAddress("glUniform4iv"));
			if(!glUniform4iv) ++numFailed;
			glUniformMatrix2fv = reinterpret_cast<PFNGLUNIFORMMATRIX2FV>(IntGetProcAddress("glUniformMatrix2fv"));
			if(!glUniformMatrix2fv) ++numFailed;
			glUniformMatrix3fv = reinterpret_cast<PFNGLUNIFORMMATRIX3FV>(IntGetProcAddress("glUniformMatrix3fv"));
			if(!glUniformMatrix3fv) ++numFailed;
			glUniformMatrix4fv = reinterpret_cast<PFNGLUNIFORMMATRIX4FV>(IntGetProcAddress("glUniformMatrix4fv"));
			if(!glUniformMatrix4fv) ++numFailed;
			glUseProgram = reinterpret_cast<PFNGLUSEPROGRAM>(IntGetProcAddress("glUseProgram"));
			if(!glUseProgram) ++numFailed;
			glValidateProgram = reinterpret_cast<PFNGLVALIDATEPROGRAM>(IntGetProcAddress("glValidateProgram"));
			if(!glValidateProgram) ++numFailed;
			glVertexAttrib1d = reinterpret_cast<PFNGLVERTEXATTRIB1D>(IntGetProcAddress("glVertexAttrib1d"));
			if(!glVertexAttrib1d) ++numFailed;
			glVertexAttrib1dv = reinterpret_cast<PFNGLVERTEXATTRIB1DV>(IntGetProcAddress("glVertexAttrib1dv"));
			if(!glVertexAttrib1dv) ++numFailed;
			glVertexAttrib1f = reinterpret_cast<PFNGLVERTEXATTRIB1F>(IntGetProcAddress("glVertexAttrib1f"));
			if(!glVertexAttrib1f) ++numFailed;
			glVertexAttrib1fv = reinterpret_cast<PFNGLVERTEXATTRIB1FV>(IntGetProcAddress("glVertexAttrib1fv"));
			if(!glVertexAttrib1fv) ++numFailed;
			glVertexAttrib1s = reinterpret_cast<PFNGLVERTEXATTRIB1S>(IntGetProcAddress("glVertexAttrib1s"));
			if(!glVertexAttrib1s) ++numFailed;
			glVertexAttrib1sv = reinterpret_cast<PFNGLVERTEXATTRIB1SV>(IntGetProcAddress("glVertexAttrib1sv"));
			if(!glVertexAttrib1sv) ++numFailed;
			glVertexAttrib2d = reinterpret_cast<PFNGLVERTEXATTRIB2D>(IntGetProcAddress("glVertexAttrib2d"));
			if(!glVertexAttrib2d) ++numFailed;
			glVertexAttrib2dv = reinterpret_cast<PFNGLVERTEXATTRIB2DV>(IntGetProcAddress("glVertexAttrib2dv"));
			if(!glVertexAttrib2dv) ++numFailed;
			glVertexAttrib2f = reinterpret_cast<PFNGLVERTEXATTRIB2F>(IntGetProcAddress("glVertexAttrib2f"));
			if(!glVertexAttrib2f) ++numFailed;
			glVertexAttrib2fv = reinterpret_cast<PFNGLVERTEXATTRIB2FV>(IntGetProcAddress("glVertexAttrib2fv"));
			if(!glVertexAttrib2fv) ++numFailed;
			glVertexAttrib2s = reinterpret_cast<PFNGLVERTEXATTRIB2S>(IntGetProcAddress("glVertexAttrib2s"));
			if(!glVertexAttrib2s) ++numFailed;
			glVertexAttrib2sv = reinterpret_cast<PFNGLVERTEXATTRIB2SV>(IntGetProcAddress("glVertexAttrib2sv"));
			if(!glVertexAttrib2sv) ++numFailed;
			glVertexAttrib3d = reinterpret_cast<PFNGLVERTEXATTRIB3D>(IntGetProcAddress("glVertexAttrib3d"));
			if(!glVertexAttrib3d) ++numFailed;
			glVertexAttrib3dv = reinterpret_cast<PFNGLVERTEXATTRIB3DV>(IntGetProcAddress("glVertexAttrib3dv"));
			if(!glVertexAttrib3dv) ++numFailed;
			glVertexAttrib3f = reinterpret_cast<PFNGLVERTEXATTRIB3F>(IntGetProcAddress("glVertexAttrib3f"));
			if(!glVertexAttrib3f) ++numFailed;
			glVertexAttrib3fv = reinterpret_cast<PFNGLVERTEXATTRIB3FV>(IntGetProcAddress("glVertexAttrib3fv"));
			if(!glVertexAttrib3fv) ++numFailed;
			glVertexAttrib3s = reinterpret_cast<PFNGLVERTEXATTRIB3S>(IntGetProcAddress("glVertexAttrib3s"));
			if(!glVertexAttrib3s) ++numFailed;
			glVertexAttrib3sv = reinterpret_cast<PFNGLVERTEXATTRIB3SV>(IntGetProcAddress("glVertexAttrib3sv"));
			if(!glVertexAttrib3sv) ++numFailed;
			glVertexAttrib4Nbv = reinterpret_cast<PFNGLVERTEXATTRIB4NBV>(IntGetProcAddress("glVertexAttrib4Nbv"));
			if(!glVertexAttrib4Nbv) ++numFailed;
			glVertexAttrib4Niv = reinterpret_cast<PFNGLVERTEXATTRIB4NIV>(IntGetProcAddress("glVertexAttrib4Niv"));
			if(!glVertexAttrib4Niv) ++numFailed;
			glVertexAttrib4Nsv = reinterpret_cast<PFNGLVERTEXATTRIB4NSV>(IntGetProcAddress("glVertexAttrib4Nsv"));
			if(!glVertexAttrib4Nsv) ++numFailed;
			glVertexAttrib4Nub = reinterpret_cast<PFNGLVERTEXATTRIB4NUB>(IntGetProcAddress("glVertexAttrib4Nub"));
			if(!glVertexAttrib4Nub) ++numFailed;
			glVertexAttrib4Nubv = reinterpret_cast<PFNGLVERTEXATTRIB4NUBV>(IntGetProcAddress("glVertexAttrib4Nubv"));
			if(!glVertexAttrib4Nubv) ++numFailed;
			glVertexAttrib4Nuiv = reinterpret_cast<PFNGLVERTEXATTRIB4NUIV>(IntGetProcAddress("glVertexAttrib4Nuiv"));
			if(!glVertexAttrib4Nuiv) ++numFailed;
			glVertexAttrib4Nusv = reinterpret_cast<PFNGLVERTEXATTRIB4NUSV>(IntGetProcAddress("glVertexAttrib4Nusv"));
			if(!glVertexAttrib4Nusv) ++numFailed;
			glVertexAttrib4bv = reinterpret_cast<PFNGLVERTEXATTRIB4BV>(IntGetProcAddress("glVertexAttrib4bv"));
			if(!glVertexAttrib4bv) ++numFailed;
			glVertexAttrib4d = reinterpret_cast<PFNGLVERTEXATTRIB4D>(IntGetProcAddress("glVertexAttrib4d"));
			if(!glVertexAttrib4d) ++numFailed;
			glVertexAttrib4dv = reinterpret_cast<PFNGLVERTEXATTRIB4DV>(IntGetProcAddress("glVertexAttrib4dv"));
			if(!glVertexAttrib4dv) ++numFailed;
			glVertexAttrib4f = reinterpret_cast<PFNGLVERTEXATTRIB4F>(IntGetProcAddress("glVertexAttrib4f"));
			if(!glVertexAttrib4f) ++numFailed;
			glVertexAttrib4fv = reinterpret_cast<PFNGLVERTEXATTRIB4FV>(IntGetProcAddress("glVertexAttrib4fv"));
			if(!glVertexAttrib4fv) ++numFailed;
			glVertexAttrib4iv = reinterpret_cast<PFNGLVERTEXATTRIB4IV>(IntGetProcAddress("glVertexAttrib4iv"));
			if(!glVertexAttrib4iv) ++numFailed;
			glVertexAttrib4s = reinterpret_cast<PFNGLVERTEXATTRIB4S>(IntGetProcAddress("glVertexAttrib4s"));
			if(!glVertexAttrib4s) ++numFailed;
			glVertexAttrib4sv = reinterpret_cast<PFNGLVERTEXATTRIB4SV>(IntGetProcAddress("glVertexAttrib4sv"));
			if(!glVertexAttrib4sv) ++numFailed;
			glVertexAttrib4ubv = reinterpret_cast<PFNGLVERTEXATTRIB4UBV>(IntGetProcAddress("glVertexAttrib4ubv"));
			if(!glVertexAttrib4ubv) ++numFailed;
			glVertexAttrib4uiv = reinterpret_cast<PFNGLVERTEXATTRIB4UIV>(IntGetProcAddress("glVertexAttrib4uiv"));
			if(!glVertexAttrib4uiv) ++numFailed;
			glVertexAttrib4usv = reinterpret_cast<PFNGLVERTEXATTRIB4USV>(IntGetProcAddress("glVertexAttrib4usv"));
			if(!glVertexAttrib4usv) ++numFailed;
			glVertexAttribPointer = reinterpret_cast<PFNGLVERTEXATTRIBPOINTER>(IntGetProcAddress("glVertexAttribPointer"));
			if(!glVertexAttribPointer) ++numFailed;
			glUniformMatrix2x3fv = reinterpret_cast<PFNGLUNIFORMMATRIX2X3FV>(IntGetProcAddress("glUniformMatrix2x3fv"));
			if(!glUniformMatrix2x3fv) ++numFailed;
			glUniformMatrix2x4fv = reinterpret_cast<PFNGLUNIFORMMATRIX2X4FV>(IntGetProcAddress("glUniformMatrix2x4fv"));
			if(!glUniformMatrix2x4fv) ++numFailed;
			glUniformMatrix3x2fv = reinterpret_cast<PFNGLUNIFORMMATRIX3X2FV>(IntGetProcAddress("glUniformMatrix3x2fv"));
			if(!glUniformMatrix3x2fv) ++numFailed;
			glUniformMatrix3x4fv = reinterpret_cast<PFNGLUNIFORMMATRIX3X4FV>(IntGetProcAddress("glUniformMatrix3x4fv"));
			if(!glUniformMatrix3x4fv) ++numFailed;
			glUniformMatrix4x2fv = reinterpret_cast<PFNGLUNIFORMMATRIX4X2FV>(IntGetProcAddress("glUniformMatrix4x2fv"));
			if(!glUniformMatrix4x2fv) ++numFailed;
			glUniformMatrix4x3fv = reinterpret_cast<PFNGLUNIFORMMATRIX4X3FV>(IntGetProcAddress("glUniformMatrix4x3fv"));
			if(!glUniformMatrix4x3fv) ++numFailed;
			return numFailed;
		}
		
		namespace sys
		{
			namespace 
			{
				typedef int (*PFN_LOADEXTENSION)();
				struct MapEntry
				{
					MapEntry(const char *_extName, exts::LoadTest *_extVariable)
						: extName(_extName)
						, extVariable(_extVariable)
						, loaderFunc(0)
						{}
						
					MapEntry(const char *_extName, exts::LoadTest *_extVariable, PFN_LOADEXTENSION _loaderFunc)
						: extName(_extName)
						, extVariable(_extVariable)
						, loaderFunc(_loaderFunc)
						{}
					
					const char *extName;
					exts::LoadTest *extVariable;
					PFN_LOADEXTENSION loaderFunc;
				};
				
				struct MapCompare
				{
					MapCompare(const char *test_) : test(test_) {}
					bool operator()(const MapEntry &other) { return strcmp(test, other.extName) == 0; }
					const char *test;
				};
				
				void InitializeMappingTable(std::vector<MapEntry> &table)
				{
					table.reserve(10);
					table.push_back(MapEntry("GL_ARB_seamless_cube_map", &exts::var_ARB_seamless_cube_map));
					table.push_back(MapEntry("GL_ARB_seamless_cubemap_per_texture", &exts::var_ARB_seamless_cubemap_per_texture));
					table.push_back(MapEntry("GL_ARB_draw_instanced", &exts::var_ARB_draw_instanced, Load_ARB_draw_instanced));
					table.push_back(MapEntry("GL_ARB_uniform_buffer_object", &exts::var_ARB_uniform_buffer_object, Load_ARB_uniform_buffer_object));
					table.push_back(MapEntry("GL_ARB_instanced_arrays", &exts::var_ARB_instanced_arrays, Load_ARB_instanced_arrays));
					table.push_back(MapEntry("GL_ARB_vertex_array_object", &exts::var_ARB_vertex_array_object, Load_ARB_vertex_array_object));
					table.push_back(MapEntry("GL_EXT_framebuffer_object", &exts::var_EXT_framebuffer_object, Load_EXT_framebuffer_object));
					table.push_back(MapEntry("GL_EXT_texture_compression_s3tc", &exts::var_EXT_texture_compression_s3tc));
					table.push_back(MapEntry("GL_EXT_texture_sRGB", &exts::var_EXT_texture_sRGB));
					table.push_back(MapEntry("GL_EXT_texture_filter_anisotropic", &exts::var_EXT_texture_filter_anisotropic));
				}
				
				void ClearExtensionVars()
				{
					exts::var_ARB_seamless_cube_map = exts::LoadTest();
					exts::var_ARB_seamless_cubemap_per_texture = exts::LoadTest();
					exts::var_ARB_draw_instanced = exts::LoadTest();
					exts::var_ARB_uniform_buffer_object = exts::LoadTest();
					exts::var_ARB_instanced_arrays = exts::LoadTest();
					exts::var_ARB_vertex_array_object = exts::LoadTest();
					exts::var_EXT_framebuffer_object = exts::LoadTest();
					exts::var_EXT_texture_compression_s3tc = exts::LoadTest();
					exts::var_EXT_texture_sRGB = exts::LoadTest();
					exts::var_EXT_texture_filter_anisotropic = exts::LoadTest();
				}
				
				void LoadExtByName(std::vector<MapEntry> &table, const char *extensionName)
				{
					std::vector<MapEntry>::iterator entry = std::find_if(table.begin(), table.end(), MapCompare(extensionName));
					
					if(entry != table.end())
					{
						if(entry->loaderFunc)
							(*entry->extVariable) = exts::LoadTest(true, entry->loaderFunc());
						else
							(*entry->extVariable) = exts::LoadTest(true, 0);
					}
				}
			} //namespace 
			
			
			namespace 
			{
				static void ProcExtsFromExtString(const char *strExtList, std::vector<MapEntry> &table)
				{
					size_t iExtListLen = strlen(strExtList);
					const char *strExtListEnd = strExtList + iExtListLen;
					const char *strCurrPos = strExtList;
					char strWorkBuff[256];
				
					while(*strCurrPos)
					{
						/*Get the extension at our position.*/
						int iStrLen = 0;
						const char *strEndStr = strchr(strCurrPos, ' ');
						int iStop = 0;
						if(strEndStr == NULL)
						{
							strEndStr = strExtListEnd;
							iStop = 1;
						}
				
						iStrLen = (int)((ptrdiff_t)strEndStr - (ptrdiff_t)strCurrPos);
				
						if(iStrLen > 255)
							return;
				
						strncpy(strWorkBuff, strCurrPos, iStrLen);
						strWorkBuff[iStrLen] = '\0';
				
						LoadExtByName(table, strWorkBuff);
				
						strCurrPos = strEndStr + 1;
						if(iStop) break;
					}
				}
				
			} //namespace 
			
			exts::LoadTest LoadFunctions()
			{
				ClearExtensionVars();
				std::vector<MapEntry> table;
				InitializeMappingTable(table);
				
				glGetString = reinterpret_cast<PFNGLGETSTRING>(IntGetProcAddress("glGetString"));
				if(!glGetString) return exts::LoadTest();
				
				ProcExtsFromExtString((const char *)gl21::gl::glGetString(gl21::gl::GL_EXTENSIONS), table);
				
				int numFailed = LoadCoreFunctions();
				return exts::LoadTest(true, numFailed);
			}
			
			static int g_major_version = 0;
			static int g_minor_version = 0;
			
			static void ParseVersionFromString(int *pOutMajor, int *pOutMinor, const char *strVersion)
			{
				const char *strDotPos = NULL;
				int iLength = 0;
				char strWorkBuff[10];
				*pOutMinor = 0;
				*pOutMajor = 0;
			
				strDotPos = strchr(strVersion, '.');
				if(!strDotPos)
					return;
			
				iLength = (int)((ptrdiff_t)strDotPos - (ptrdiff_t)strVersion);
				strncpy(strWorkBuff, strVersion, iLength);
				strWorkBuff[iLength] = '\0';
			
				*pOutMajor = atoi(strWorkBuff);
				strDotPos = strchr(strVersion + iLength + 1, ' ');
				if(!strDotPos)
				{
					/*No extra data. Take the whole rest of the string.*/
					strcpy(strWorkBuff, strVersion + iLength + 1);
				}
				else
				{
					/*Copy only up until the space.*/
					int iLengthMinor = (int)((ptrdiff_t)strDotPos - (ptrdiff_t)strVersion);
					iLengthMinor = iLengthMinor - (iLength + 1);
					strncpy(strWorkBuff, strVersion + iLength + 1, iLengthMinor);
					strWorkBuff[iLengthMinor] = '\0';
				}
			
				*pOutMinor = atoi(strWorkBuff);
			}
			
			static void GetGLVersion()
			{
				ParseVersionFromString(&g_major_version, &g_minor_version, (const char*)glGetString(GL_VERSION));
			}
			
			int GetMajorVersion()
			{
				if(g_major_version == 0)
					GetGLVersion();
				return g_major_version;
			}
			
			int GetMinorVersion()
			{
				if(g_major_version == 0) //Yes, check the major version to get the minor one.
					GetGLVersion();
				return g_minor_version;
			}
			
			bool IsVersionGEQ(int majorVersion, int minorVersion)
			{
				if(g_major_version == 0)
					GetGLVersion();
				
				if(majorVersion < g_major_version) return true;
				if(majorVersion > g_major_version) return false;
				if(minorVersion <= g_minor_version) return true;
				return false;
			}
			
		} //namespace sys
	} //namespace gl
} //namespace gl21
